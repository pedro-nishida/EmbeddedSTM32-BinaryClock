
relogio-binario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d84  08003d84  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d88  08003d88  00004d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003d8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  08003d9c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003d9c  000050a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a043  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e65  00000000  00000000  0000f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00010ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c5  00000000  00000000  00011a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011905  00000000  00000000  0001231d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca56  00000000  00000000  00023c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d022  00000000  00000000  00030678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d69a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  0009d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0009ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d48 	.word	0x08003d48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003d48 	.word	0x08003d48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <setup>:
TimeStruct currentTime = {0, 0, 0, 0, 0, 0}; // initializes currentTime at 00:00:00
TimeStruct alarmTime = {0, 0, 0, 0, 0, 0};
ConfigMode currentMode = MODE_RUNNING;
bool anyButtonPressed;

void setup(TIM_HandleTypeDef *htimPWM) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	// initializes timer for PWM
	HAL_TIM_PWM_Init(htimPWM);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0018      	movs	r0, r3
 8000688:	f002 fe18 	bl	80032bc <HAL_TIM_PWM_Init>
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <loop>:

void loop(TIM_HandleTypeDef *htimPWM) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	anyButtonPressed = 0;
 800069c:	4b45      	ldr	r3, [pc, #276]	@ (80007b4 <loop+0x120>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
	anyButtonPressed = anyButtonPressed || HAL_GPIO_ReadPin(SEC_UNID_GPIO_Port, SEC_UNID_Pin);
 80006a2:	4b44      	ldr	r3, [pc, #272]	@ (80007b4 <loop+0x120>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d107      	bne.n	80006ba <loop+0x26>
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2120      	movs	r1, #32
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 f983 	bl	80019bc <HAL_GPIO_ReadPin>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <loop+0x2a>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <loop+0x2c>
 80006be:	2300      	movs	r3, #0
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b3c      	ldr	r3, [pc, #240]	@ (80007b4 <loop+0x120>)
 80006c4:	701a      	strb	r2, [r3, #0]
	anyButtonPressed = anyButtonPressed || HAL_GPIO_ReadPin(SEC_DEZ_GPIO_Port, SEC_DEZ_Pin);
 80006c6:	4b3b      	ldr	r3, [pc, #236]	@ (80007b4 <loop+0x120>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d107      	bne.n	80006de <loop+0x4a>
 80006ce:	23a0      	movs	r3, #160	@ 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2140      	movs	r1, #64	@ 0x40
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 f971 	bl	80019bc <HAL_GPIO_ReadPin>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <loop+0x4e>
 80006de:	2301      	movs	r3, #1
 80006e0:	e000      	b.n	80006e4 <loop+0x50>
 80006e2:	2300      	movs	r3, #0
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b33      	ldr	r3, [pc, #204]	@ (80007b4 <loop+0x120>)
 80006e8:	701a      	strb	r2, [r3, #0]
	anyButtonPressed = anyButtonPressed || HAL_GPIO_ReadPin(MIN_UNID_GPIO_Port, MIN_UNID_Pin);
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <loop+0x120>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d107      	bne.n	8000702 <loop+0x6e>
 80006f2:	23a0      	movs	r3, #160	@ 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f95f 	bl	80019bc <HAL_GPIO_ReadPin>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <loop+0x72>
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <loop+0x74>
 8000706:	2300      	movs	r3, #0
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <loop+0x120>)
 800070c:	701a      	strb	r2, [r3, #0]
	anyButtonPressed = anyButtonPressed || HAL_GPIO_ReadPin(MIN_DEZ_GPIO_Port, MIN_DEZ_Pin);
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <loop+0x120>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d109      	bne.n	800072a <loop+0x96>
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	005a      	lsls	r2, r3, #1
 800071a:	23a0      	movs	r3, #160	@ 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f001 f94b 	bl	80019bc <HAL_GPIO_ReadPin>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <loop+0x9a>
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <loop+0x9c>
 800072e:	2300      	movs	r3, #0
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <loop+0x120>)
 8000734:	701a      	strb	r2, [r3, #0]
	anyButtonPressed = anyButtonPressed || HAL_GPIO_ReadPin(HOUR_UNID_GPIO_Port, HOUR_UNID_Pin);
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <loop+0x120>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d109      	bne.n	8000752 <loop+0xbe>
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	009a      	lsls	r2, r3, #2
 8000742:	23a0      	movs	r3, #160	@ 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f937 	bl	80019bc <HAL_GPIO_ReadPin>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <loop+0xc2>
 8000752:	2301      	movs	r3, #1
 8000754:	e000      	b.n	8000758 <loop+0xc4>
 8000756:	2300      	movs	r3, #0
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <loop+0x120>)
 800075c:	701a      	strb	r2, [r3, #0]
	anyButtonPressed = anyButtonPressed || HAL_GPIO_ReadPin(HOUR_DEZ_GPIO_Port, HOUR_DEZ_Pin);
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <loop+0x120>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d109      	bne.n	800077a <loop+0xe6>
 8000766:	2380      	movs	r3, #128	@ 0x80
 8000768:	00da      	lsls	r2, r3, #3
 800076a:	23a0      	movs	r3, #160	@ 0xa0
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f923 	bl	80019bc <HAL_GPIO_ReadPin>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <loop+0xea>
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <loop+0xec>
 800077e:	2300      	movs	r3, #0
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <loop+0x120>)
 8000784:	701a      	strb	r2, [r3, #0]

	if (anyButtonPressed) readButtons();
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <loop+0x120>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <loop+0xfe>
 800078e:	f000 f9f5 	bl	8000b7c <readButtons>

	if (currentMode == MODE_RUNNING) updateDisplay(currentTime);
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <loop+0x124>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d104      	bne.n	80007a4 <loop+0x110>
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <loop+0x128>)
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	6859      	ldr	r1, [r3, #4]
 80007a0:	f000 f912 	bl	80009c8 <updateDisplay>
	playAlarm(htimPWM);		// VERIFICAR: horario congelado durante alarme
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 f9b4 	bl	8000b14 <playAlarm>
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000003a 	.word	0x2000003a
 80007b8:	20000000 	.word	0x20000000
 80007bc:	2000002c 	.word	0x2000002c

080007c0 <incrementSeconds_units>:


// seconds
void incrementSeconds_units() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    currentTime.seconds_units = (currentTime.seconds_units + 1) % 10;
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <incrementSeconds_units+0x28>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	210a      	movs	r1, #10
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff fe0b 	bl	80003e8 <__aeabi_idivmod>
 80007d2:	000b      	movs	r3, r1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <incrementSeconds_units+0x28>)
 80007d8:	701a      	strb	r2, [r3, #0]
    HAL_Delay(BUTTON_DELAY);
 80007da:	2064      	movs	r0, #100	@ 0x64
 80007dc:	f000 fe7e 	bl	80014dc <HAL_Delay>
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	2000002c 	.word	0x2000002c

080007ec <incrementSeconds_tens>:

void incrementSeconds_tens() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    currentTime.seconds_tens = (currentTime.seconds_tens + 1) % 6;
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <incrementSeconds_tens+0x28>)
 80007f2:	785b      	ldrb	r3, [r3, #1]
 80007f4:	3301      	adds	r3, #1
 80007f6:	2106      	movs	r1, #6
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fdf5 	bl	80003e8 <__aeabi_idivmod>
 80007fe:	000b      	movs	r3, r1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <incrementSeconds_tens+0x28>)
 8000804:	705a      	strb	r2, [r3, #1]
    HAL_Delay(BUTTON_DELAY);
 8000806:	2064      	movs	r0, #100	@ 0x64
 8000808:	f000 fe68 	bl	80014dc <HAL_Delay>
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	2000002c 	.word	0x2000002c

08000818 <incrementMinutes_units>:


// minutes
void incrementMinutes_units() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    currentTime.minutes_units = (currentTime.minutes_units + 1) % 10;
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <incrementMinutes_units+0x28>)
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	3301      	adds	r3, #1
 8000822:	210a      	movs	r1, #10
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff fddf 	bl	80003e8 <__aeabi_idivmod>
 800082a:	000b      	movs	r3, r1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <incrementMinutes_units+0x28>)
 8000830:	709a      	strb	r2, [r3, #2]
    HAL_Delay(BUTTON_DELAY);
 8000832:	2064      	movs	r0, #100	@ 0x64
 8000834:	f000 fe52 	bl	80014dc <HAL_Delay>
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	2000002c 	.word	0x2000002c

08000844 <incrementMinutes_tens>:

void incrementMinutes_tens() {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    currentTime.minutes_tens = (currentTime.minutes_tens + 1) % 6;
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <incrementMinutes_tens+0x28>)
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	3301      	adds	r3, #1
 800084e:	2106      	movs	r1, #6
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fdc9 	bl	80003e8 <__aeabi_idivmod>
 8000856:	000b      	movs	r3, r1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <incrementMinutes_tens+0x28>)
 800085c:	70da      	strb	r2, [r3, #3]
    HAL_Delay(BUTTON_DELAY);
 800085e:	2064      	movs	r0, #100	@ 0x64
 8000860:	f000 fe3c 	bl	80014dc <HAL_Delay>
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	2000002c 	.word	0x2000002c

08000870 <incrementHours_units>:


// hours
void incrementHours_units() {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	if (currentTime.hours_tens == 2)
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <incrementHours_units+0x4c>)
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d10e      	bne.n	800089a <incrementHours_units+0x2a>
		currentTime.hours_units = (currentTime.hours_units + 1) % 4;  // Limite de 24 horas
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <incrementHours_units+0x4c>)
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	4a0f      	ldr	r2, [pc, #60]	@ (80008c0 <incrementHours_units+0x50>)
 8000884:	4013      	ands	r3, r2
 8000886:	d504      	bpl.n	8000892 <incrementHours_units+0x22>
 8000888:	3b01      	subs	r3, #1
 800088a:	2204      	movs	r2, #4
 800088c:	4252      	negs	r2, r2
 800088e:	4313      	orrs	r3, r2
 8000890:	3301      	adds	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <incrementHours_units+0x4c>)
 8000896:	711a      	strb	r2, [r3, #4]
 8000898:	e00a      	b.n	80008b0 <incrementHours_units+0x40>
	else
		currentTime.hours_units = (currentTime.hours_units + 1) % 10;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <incrementHours_units+0x4c>)
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	3301      	adds	r3, #1
 80008a0:	210a      	movs	r1, #10
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fda0 	bl	80003e8 <__aeabi_idivmod>
 80008a8:	000b      	movs	r3, r1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b03      	ldr	r3, [pc, #12]	@ (80008bc <incrementHours_units+0x4c>)
 80008ae:	711a      	strb	r2, [r3, #4]
	HAL_Delay(BUTTON_DELAY);
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f000 fe13 	bl	80014dc <HAL_Delay>
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000002c 	.word	0x2000002c
 80008c0:	80000003 	.word	0x80000003

080008c4 <incrementHours_tens>:

void incrementHours_tens() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    currentTime.hours_tens = (currentTime.hours_tens + 1) % 3;  // Limite de 24 horas
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <incrementHours_tens+0x28>)
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	3301      	adds	r3, #1
 80008ce:	2103      	movs	r1, #3
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff fd89 	bl	80003e8 <__aeabi_idivmod>
 80008d6:	000b      	movs	r3, r1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <incrementHours_tens+0x28>)
 80008dc:	715a      	strb	r2, [r3, #5]
    HAL_Delay(BUTTON_DELAY);
 80008de:	2064      	movs	r0, #100	@ 0x64
 80008e0:	f000 fdfc 	bl	80014dc <HAL_Delay>
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	2000002c 	.word	0x2000002c

080008f0 <incrementAlarmMinutes_units>:


// minutes (alarm)
void incrementAlarmMinutes_units() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	alarmTime.minutes_units = (alarmTime.minutes_units + 1) % 10;
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <incrementAlarmMinutes_units+0x28>)
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	3301      	adds	r3, #1
 80008fa:	210a      	movs	r1, #10
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fd73 	bl	80003e8 <__aeabi_idivmod>
 8000902:	000b      	movs	r3, r1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <incrementAlarmMinutes_units+0x28>)
 8000908:	709a      	strb	r2, [r3, #2]
	HAL_Delay(BUTTON_DELAY);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f000 fde6 	bl	80014dc <HAL_Delay>
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	20000034 	.word	0x20000034

0800091c <incrementAlarmMinutes_tens>:

void incrementAlarmMinutes_tens() {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	alarmTime.minutes_tens = (alarmTime.minutes_tens + 1) % 6;
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <incrementAlarmMinutes_tens+0x28>)
 8000922:	78db      	ldrb	r3, [r3, #3]
 8000924:	3301      	adds	r3, #1
 8000926:	2106      	movs	r1, #6
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff fd5d 	bl	80003e8 <__aeabi_idivmod>
 800092e:	000b      	movs	r3, r1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <incrementAlarmMinutes_tens+0x28>)
 8000934:	70da      	strb	r2, [r3, #3]
	HAL_Delay(BUTTON_DELAY);
 8000936:	2064      	movs	r0, #100	@ 0x64
 8000938:	f000 fdd0 	bl	80014dc <HAL_Delay>
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	20000034 	.word	0x20000034

08000948 <incrementAlarmHours_units>:


// hours (alarm)
void incrementAlarmHours_units() {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	if (alarmTime.hours_tens == 2)
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <incrementAlarmHours_units+0x4c>)
 800094e:	795b      	ldrb	r3, [r3, #5]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d10e      	bne.n	8000972 <incrementAlarmHours_units+0x2a>
		alarmTime.hours_units = (alarmTime.hours_units + 1) % 4;  // Limite de 24 horas
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <incrementAlarmHours_units+0x4c>)
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	3301      	adds	r3, #1
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <incrementAlarmHours_units+0x50>)
 800095c:	4013      	ands	r3, r2
 800095e:	d504      	bpl.n	800096a <incrementAlarmHours_units+0x22>
 8000960:	3b01      	subs	r3, #1
 8000962:	2204      	movs	r2, #4
 8000964:	4252      	negs	r2, r2
 8000966:	4313      	orrs	r3, r2
 8000968:	3301      	adds	r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <incrementAlarmHours_units+0x4c>)
 800096e:	711a      	strb	r2, [r3, #4]
 8000970:	e00a      	b.n	8000988 <incrementAlarmHours_units+0x40>
	else
		alarmTime.hours_units = (alarmTime.hours_units + 1) % 10;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <incrementAlarmHours_units+0x4c>)
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	210a      	movs	r1, #10
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff fd34 	bl	80003e8 <__aeabi_idivmod>
 8000980:	000b      	movs	r3, r1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b03      	ldr	r3, [pc, #12]	@ (8000994 <incrementAlarmHours_units+0x4c>)
 8000986:	711a      	strb	r2, [r3, #4]
	HAL_Delay(BUTTON_DELAY);
 8000988:	2064      	movs	r0, #100	@ 0x64
 800098a:	f000 fda7 	bl	80014dc <HAL_Delay>
}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000034 	.word	0x20000034
 8000998:	80000003 	.word	0x80000003

0800099c <incrementAlarmHours_tens>:

void incrementAlarmHours_tens() {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	alarmTime.hours_tens = (alarmTime.hours_tens + 1) % 3;  // Limite de 24 horas
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <incrementAlarmHours_tens+0x28>)
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	3301      	adds	r3, #1
 80009a6:	2103      	movs	r1, #3
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fd1d 	bl	80003e8 <__aeabi_idivmod>
 80009ae:	000b      	movs	r3, r1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <incrementAlarmHours_tens+0x28>)
 80009b4:	715a      	strb	r2, [r3, #5]
	HAL_Delay(BUTTON_DELAY);
 80009b6:	2064      	movs	r0, #100	@ 0x64
 80009b8:	f000 fd90 	bl	80014dc <HAL_Delay>
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	20000034 	.word	0x20000034

080009c8 <updateDisplay>:




void updateDisplay(TimeStruct time) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	003b      	movs	r3, r7
 80009d0:	6018      	str	r0, [r3, #0]
 80009d2:	6059      	str	r1, [r3, #4]
	uint8_t ledBuffer[20];

	// hours
	ledBuffer[0]  = time.hours_tens >> 1;
 80009d4:	003b      	movs	r3, r7
 80009d6:	795b      	ldrb	r3, [r3, #5]
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	210c      	movs	r1, #12
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	ledBuffer[1]  = time.hours_tens & ~(1 << 1);
 80009e2:	003b      	movs	r3, r7
 80009e4:	795b      	ldrb	r3, [r3, #5]
 80009e6:	2202      	movs	r2, #2
 80009e8:	4393      	bics	r3, r2
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	705a      	strb	r2, [r3, #1]

	ledBuffer[2]  = time.hours_units >> 3;
 80009f0:	003b      	movs	r3, r7
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	709a      	strb	r2, [r3, #2]
	ledBuffer[3]  = (time.hours_units & ~(0b1 << 3)) >> 2;
 80009fc:	003b      	movs	r3, r7
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	109b      	asrs	r3, r3, #2
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2202      	movs	r2, #2
 8000a06:	4393      	bics	r3, r2
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	70da      	strb	r2, [r3, #3]
	ledBuffer[4]  = (time.hours_units & ~(0b11 << 2)) >> 1;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	105b      	asrs	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2206      	movs	r2, #6
 8000a18:	4393      	bics	r3, r2
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	711a      	strb	r2, [r3, #4]
	ledBuffer[5]  = time.hours_units & ~(0b111 << 1);
 8000a20:	003b      	movs	r3, r7
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	220e      	movs	r2, #14
 8000a26:	4393      	bics	r3, r2
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	715a      	strb	r2, [r3, #5]


	// minutes
	ledBuffer[6]  = time.minutes_tens >> 2;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	78db      	ldrb	r3, [r3, #3]
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	719a      	strb	r2, [r3, #6]
	ledBuffer[7]  = (time.minutes_tens & ~(0b1 << 2)) >> 1;
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	105b      	asrs	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2202      	movs	r2, #2
 8000a44:	4393      	bics	r3, r2
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	71da      	strb	r2, [r3, #7]
	ledBuffer[8]  = (time.minutes_tens & ~(0b11 << 1));
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	78db      	ldrb	r3, [r3, #3]
 8000a50:	2206      	movs	r2, #6
 8000a52:	4393      	bics	r3, r2
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	721a      	strb	r2, [r3, #8]

	ledBuffer[9]  = time.minutes_units >> 3;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	725a      	strb	r2, [r3, #9]
	ledBuffer[10] = (time.minutes_units & ~(0b1 << 3)) >> 2;
 8000a66:	003b      	movs	r3, r7
 8000a68:	789b      	ldrb	r3, [r3, #2]
 8000a6a:	109b      	asrs	r3, r3, #2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4393      	bics	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	729a      	strb	r2, [r3, #10]
	ledBuffer[11] = (time.minutes_units & ~(0b11 << 2)) >> 1;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	789b      	ldrb	r3, [r3, #2]
 8000a7c:	105b      	asrs	r3, r3, #1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2206      	movs	r2, #6
 8000a82:	4393      	bics	r3, r2
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	72da      	strb	r2, [r3, #11]
	ledBuffer[12] = time.minutes_units & ~(0b111 << 1);
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	220e      	movs	r2, #14
 8000a90:	4393      	bics	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	731a      	strb	r2, [r3, #12]


	// seconds
	ledBuffer[13] = time.minutes_tens >> 2;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	735a      	strb	r2, [r3, #13]
	ledBuffer[14] = (time.minutes_tens & ~(0b1 << 2)) >> 1;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	78db      	ldrb	r3, [r3, #3]
 8000aa8:	105b      	asrs	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2202      	movs	r2, #2
 8000aae:	4393      	bics	r3, r2
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	739a      	strb	r2, [r3, #14]
	ledBuffer[15] = (time.minutes_tens & ~(0b11 << 1));
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	78db      	ldrb	r3, [r3, #3]
 8000aba:	2206      	movs	r2, #6
 8000abc:	4393      	bics	r3, r2
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	73da      	strb	r2, [r3, #15]

	ledBuffer[16] = time.minutes_units >> 3;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	741a      	strb	r2, [r3, #16]
	ledBuffer[17] = (time.minutes_units & ~(0b1 << 3)) >> 2;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	789b      	ldrb	r3, [r3, #2]
 8000ad4:	109b      	asrs	r3, r3, #2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2202      	movs	r2, #2
 8000ada:	4393      	bics	r3, r2
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	745a      	strb	r2, [r3, #17]
	ledBuffer[18] = (time.minutes_units & ~(0b11 << 2)) >> 1;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	789b      	ldrb	r3, [r3, #2]
 8000ae6:	105b      	asrs	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2206      	movs	r2, #6
 8000aec:	4393      	bics	r3, r2
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	749a      	strb	r2, [r3, #18]
	ledBuffer[19] = time.minutes_units & ~(0b111 << 1);
 8000af4:	003b      	movs	r3, r7
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	220e      	movs	r2, #14
 8000afa:	4393      	bics	r3, r2
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	74da      	strb	r2, [r3, #19]

	TLC5947_SendData(ledBuffer);
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f934 	bl	8000d72 <TLC5947_SendData>
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b008      	add	sp, #32
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <playAlarm>:



void playAlarm(TIM_HandleTypeDef *htimPWM) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if (currentTime.hours_tens == alarmTime.hours_tens && currentTime.hours_units == alarmTime.hours_units &&
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <playAlarm+0x5c>)
 8000b1e:	795a      	ldrb	r2, [r3, #5]
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <playAlarm+0x60>)
 8000b22:	795b      	ldrb	r3, [r3, #5]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d11f      	bne.n	8000b68 <playAlarm+0x54>
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <playAlarm+0x5c>)
 8000b2a:	791a      	ldrb	r2, [r3, #4]
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <playAlarm+0x60>)
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d119      	bne.n	8000b68 <playAlarm+0x54>
	    currentTime.minutes_tens == alarmTime.minutes_tens && currentTime.minutes_units == alarmTime.minutes_units) {
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <playAlarm+0x5c>)
 8000b36:	78da      	ldrb	r2, [r3, #3]
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <playAlarm+0x60>)
 8000b3a:	78db      	ldrb	r3, [r3, #3]
	if (currentTime.hours_tens == alarmTime.hours_tens && currentTime.hours_units == alarmTime.hours_units &&
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d113      	bne.n	8000b68 <playAlarm+0x54>
	    currentTime.minutes_tens == alarmTime.minutes_tens && currentTime.minutes_units == alarmTime.minutes_units) {
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <playAlarm+0x5c>)
 8000b42:	789a      	ldrb	r2, [r3, #2]
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <playAlarm+0x60>)
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d10d      	bne.n	8000b68 <playAlarm+0x54>

		HAL_TIM_PWM_Start(htimPWM, TIM_CHANNEL_1);	// alarm started
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 fbfb 	bl	800334c <HAL_TIM_PWM_Start>
	    HAL_Delay(60000);							// alarm sound duration
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <playAlarm+0x64>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fcbf 	bl	80014dc <HAL_Delay>
	    HAL_TIM_PWM_Stop(htimPWM, TIM_CHANNEL_1);	// alarm ended
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2100      	movs	r1, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 fc7e 	bl	8003464 <HAL_TIM_PWM_Stop>
	}
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000002c 	.word	0x2000002c
 8000b74:	20000034 	.word	0x20000034
 8000b78:	0000ea60 	.word	0x0000ea60

08000b7c <readButtons>:



void readButtons() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	currentMode = HAL_GPIO_ReadPin(SEL_MODE_GPIO_Port, SEL_MODE_Pin) ? MODE_CONFIG_ALARM : MODE_CONFIG_CLOCK;
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	011a      	lsls	r2, r3, #4
 8000b84:	23a0      	movs	r3, #160	@ 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	0011      	movs	r1, r2
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 ff16 	bl	80019bc <HAL_GPIO_ReadPin>
 8000b90:	0003      	movs	r3, r0
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	4193      	sbcs	r3, r2
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b51      	ldr	r3, [pc, #324]	@ (8000ce0 <readButtons+0x164>)
 8000b9c:	701a      	strb	r2, [r3, #0]

	if (currentMode == MODE_CONFIG_CLOCK) {
 8000b9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ce0 <readButtons+0x164>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d151      	bne.n	8000c4a <readButtons+0xce>
		while (1) {
			if (HAL_GPIO_ReadPin(SEC_UNID_GPIO_Port, SEC_UNID_Pin)) incrementSeconds_units();
 8000ba6:	23a0      	movs	r3, #160	@ 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2120      	movs	r1, #32
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 ff05 	bl	80019bc <HAL_GPIO_ReadPin>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <readButtons+0x3e>
 8000bb6:	f7ff fe03 	bl	80007c0 <incrementSeconds_units>
			if (HAL_GPIO_ReadPin(SEC_DEZ_GPIO_Port, SEC_DEZ_Pin)) incrementSeconds_tens();
 8000bba:	23a0      	movs	r3, #160	@ 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	2140      	movs	r1, #64	@ 0x40
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 fefb 	bl	80019bc <HAL_GPIO_ReadPin>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d001      	beq.n	8000bce <readButtons+0x52>
 8000bca:	f7ff fe0f 	bl	80007ec <incrementSeconds_tens>
			if (HAL_GPIO_ReadPin(MIN_UNID_GPIO_Port, MIN_UNID_Pin)) incrementMinutes_units();
 8000bce:	23a0      	movs	r3, #160	@ 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fef1 	bl	80019bc <HAL_GPIO_ReadPin>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <readButtons+0x66>
 8000bde:	f7ff fe1b 	bl	8000818 <incrementMinutes_units>
			if (HAL_GPIO_ReadPin(MIN_DEZ_GPIO_Port, MIN_DEZ_Pin)) incrementMinutes_tens();
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	005a      	lsls	r2, r3, #1
 8000be6:	23a0      	movs	r3, #160	@ 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 fee5 	bl	80019bc <HAL_GPIO_ReadPin>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <readButtons+0x7e>
 8000bf6:	f7ff fe25 	bl	8000844 <incrementMinutes_tens>
			if (HAL_GPIO_ReadPin(HOUR_UNID_GPIO_Port, HOUR_UNID_Pin)) incrementHours_units();
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	009a      	lsls	r2, r3, #2
 8000bfe:	23a0      	movs	r3, #160	@ 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 fed9 	bl	80019bc <HAL_GPIO_ReadPin>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <readButtons+0x96>
 8000c0e:	f7ff fe2f 	bl	8000870 <incrementHours_units>
			if (HAL_GPIO_ReadPin(HOUR_DEZ_GPIO_Port, HOUR_DEZ_Pin)) incrementHours_tens();
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	00da      	lsls	r2, r3, #3
 8000c16:	23a0      	movs	r3, #160	@ 0xa0
 8000c18:	05db      	lsls	r3, r3, #23
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 fecd 	bl	80019bc <HAL_GPIO_ReadPin>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d001      	beq.n	8000c2a <readButtons+0xae>
 8000c26:	f7ff fe4d 	bl	80008c4 <incrementHours_tens>
			updateDisplay(currentTime);
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <readButtons+0x168>)
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	6859      	ldr	r1, [r3, #4]
 8000c30:	f7ff feca 	bl	80009c8 <updateDisplay>

            if (HAL_GPIO_ReadPin(CONFIRM_GPIO_Port, CONFIRM_Pin)) break;
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	015a      	lsls	r2, r3, #5
 8000c38:	23a0      	movs	r3, #160	@ 0xa0
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 febc 	bl	80019bc <HAL_GPIO_ReadPin>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d142      	bne.n	8000cce <readButtons+0x152>
			if (HAL_GPIO_ReadPin(SEC_UNID_GPIO_Port, SEC_UNID_Pin)) incrementSeconds_units();
 8000c48:	e7ad      	b.n	8000ba6 <readButtons+0x2a>
        }
    } else if (currentMode == MODE_CONFIG_ALARM) {
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <readButtons+0x164>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d140      	bne.n	8000cd4 <readButtons+0x158>
        while (1) {
            if (HAL_GPIO_ReadPin(MIN_UNID_GPIO_Port, MIN_UNID_Pin)) incrementAlarmMinutes_units();
 8000c52:	23a0      	movs	r3, #160	@ 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 feaf 	bl	80019bc <HAL_GPIO_ReadPin>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <readButtons+0xea>
 8000c62:	f7ff fe45 	bl	80008f0 <incrementAlarmMinutes_units>
            if (HAL_GPIO_ReadPin(MIN_DEZ_GPIO_Port, MIN_DEZ_Pin)) incrementAlarmMinutes_tens();
 8000c66:	2380      	movs	r3, #128	@ 0x80
 8000c68:	005a      	lsls	r2, r3, #1
 8000c6a:	23a0      	movs	r3, #160	@ 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fea3 	bl	80019bc <HAL_GPIO_ReadPin>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <readButtons+0x102>
 8000c7a:	f7ff fe4f 	bl	800091c <incrementAlarmMinutes_tens>
            if (HAL_GPIO_ReadPin(HOUR_UNID_GPIO_Port, HOUR_UNID_Pin)) incrementAlarmHours_units();
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	009a      	lsls	r2, r3, #2
 8000c82:	23a0      	movs	r3, #160	@ 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fe97 	bl	80019bc <HAL_GPIO_ReadPin>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <readButtons+0x11a>
 8000c92:	f7ff fe59 	bl	8000948 <incrementAlarmHours_units>
            if (HAL_GPIO_ReadPin(HOUR_DEZ_GPIO_Port, HOUR_DEZ_Pin)) incrementAlarmHours_tens();
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	00da      	lsls	r2, r3, #3
 8000c9a:	23a0      	movs	r3, #160	@ 0xa0
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fe8b 	bl	80019bc <HAL_GPIO_ReadPin>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <readButtons+0x132>
 8000caa:	f7ff fe77 	bl	800099c <incrementAlarmHours_tens>
            updateDisplay(alarmTime);
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <readButtons+0x16c>)
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	6859      	ldr	r1, [r3, #4]
 8000cb4:	f7ff fe88 	bl	80009c8 <updateDisplay>

            if (HAL_GPIO_ReadPin(CONFIRM_GPIO_Port, CONFIRM_Pin)) break;
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	015a      	lsls	r2, r3, #5
 8000cbc:	23a0      	movs	r3, #160	@ 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 fe7a 	bl	80019bc <HAL_GPIO_ReadPin>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d102      	bne.n	8000cd2 <readButtons+0x156>
            if (HAL_GPIO_ReadPin(MIN_UNID_GPIO_Port, MIN_UNID_Pin)) incrementAlarmMinutes_units();
 8000ccc:	e7c1      	b.n	8000c52 <readButtons+0xd6>
            if (HAL_GPIO_ReadPin(CONFIRM_GPIO_Port, CONFIRM_Pin)) break;
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	e000      	b.n	8000cd4 <readButtons+0x158>
            if (HAL_GPIO_ReadPin(CONFIRM_GPIO_Port, CONFIRM_Pin)) break;
 8000cd2:	46c0      	nop			@ (mov r8, r8)
        }
    }

    currentMode = MODE_RUNNING;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	@ (8000ce0 <readButtons+0x164>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	2000002c 	.word	0x2000002c
 8000ce8:	20000034 	.word	0x20000034

08000cec <__TLC5947_SendGSData>:



void __TLC5947_SendGSData(uint32_t pwmval) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (pwmval >= (1 << 24)) return;							// error (overflow)
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	2380      	movs	r3, #128	@ 0x80
 8000cf8:	045b      	lsls	r3, r3, #17
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d235      	bcs.n	8000d6a <__TLC5947_SendGSData+0x7e>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000cfe:	23a0      	movs	r3, #160	@ 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2200      	movs	r2, #0
 8000d04:	2104      	movs	r1, #4
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fe75 	bl	80019f6 <HAL_GPIO_WritePin>


	for (int i = 11; i >= 0; i--) {
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e027      	b.n	8000d62 <__TLC5947_SendGSData+0x76>
		HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, pwmval / (1 << i));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	40da      	lsrs	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	23a0      	movs	r3, #160	@ 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	2102      	movs	r1, #2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fe67 	bl	80019f6 <HAL_GPIO_WritePin>
		pwmval &= ~(1 << i);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	43db      	mvns	r3, r3
 8000d32:	001a      	movs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4013      	ands	r3, r2
 8000d38:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2104      	movs	r1, #4
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fe57 	bl	80019f6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f000 fbc7 	bl	80014dc <HAL_Delay>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000d4e:	23a0      	movs	r3, #160	@ 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	2200      	movs	r2, #0
 8000d54:	2104      	movs	r1, #4
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fe4d 	bl	80019f6 <HAL_GPIO_WritePin>
	for (int i = 11; i >= 0; i--) {
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dad4      	bge.n	8000d12 <__TLC5947_SendGSData+0x26>
 8000d68:	e000      	b.n	8000d6c <__TLC5947_SendGSData+0x80>
	if (pwmval >= (1 << 24)) return;							// error (overflow)
 8000d6a:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <TLC5947_SendData>:


void TLC5947_SendData(uint8_t *ledBuffer) {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(XLAT_GPIO_Port, XLAT_Pin, GPIO_PIN_RESET);
 8000d7a:	23a0      	movs	r3, #160	@ 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2108      	movs	r1, #8
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fe37 	bl	80019f6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) __TLC5947_SendGSData(0);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	e005      	b.n	8000d9a <TLC5947_SendData+0x28>
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff ffac 	bl	8000cec <__TLC5947_SendGSData>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	ddf6      	ble.n	8000d8e <TLC5947_SendData+0x1c>
	for (int i = 19; i >= 0; i--) {
 8000da0:	2313      	movs	r3, #19
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	e010      	b.n	8000dc8 <TLC5947_SendData+0x56>
		if (ledBuffer[i] > 1) return;							// error (undesired value)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	18d3      	adds	r3, r2, r3
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d815      	bhi.n	8000dde <TLC5947_SendData+0x6c>
		__TLC5947_SendGSData(PWM_VALUE * ledBuffer[i]);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	02db      	lsls	r3, r3, #11
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ff95 	bl	8000cec <__TLC5947_SendGSData>
	for (int i = 19; i >= 0; i--) {
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	daeb      	bge.n	8000da6 <TLC5947_SendData+0x34>
	}
	HAL_GPIO_WritePin(XLAT_GPIO_Port, XLAT_Pin, GPIO_PIN_SET);
 8000dce:	23a0      	movs	r3, #160	@ 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 fe0d 	bl	80019f6 <HAL_GPIO_WritePin>
 8000ddc:	e000      	b.n	8000de0 <TLC5947_SendData+0x6e>
		if (ledBuffer[i] > 1) return;							// error (undesired value)
 8000dde:	46c0      	nop			@ (mov r8, r8)
}
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f000 fb06 	bl	80013fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f812 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 f9ae 	bl	8001154 <MX_GPIO_Init>
  MX_RTC_Init();
 8000df8:	f000 f888 	bl	8000f0c <MX_RTC_Init>
  MX_TIM2_Init();
 8000dfc:	f000 f92c 	bl	8001058 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup(&htim2);
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <main+0x2c>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fc3a 	bl	800067c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop(&htim2);
 8000e08:	4b02      	ldr	r3, [pc, #8]	@ (8000e14 <main+0x2c>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fc42 	bl	8000694 <loop>
 8000e10:	e7fa      	b.n	8000e08 <main+0x20>
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	20000060 	.word	0x20000060

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b099      	sub	sp, #100	@ 0x64
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	242c      	movs	r4, #44	@ 0x2c
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	0018      	movs	r0, r3
 8000e24:	2334      	movs	r3, #52	@ 0x34
 8000e26:	001a      	movs	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f002 ff61 	bl	8003cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2e:	2318      	movs	r3, #24
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	0018      	movs	r0, r3
 8000e34:	2314      	movs	r3, #20
 8000e36:	001a      	movs	r2, r3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	f002 ff59 	bl	8003cf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3e:	003b      	movs	r3, r7
 8000e40:	0018      	movs	r0, r3
 8000e42:	2318      	movs	r3, #24
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f002 ff52 	bl	8003cf0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <SystemClock_Config+0xe8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <SystemClock_Config+0xec>)
 8000e52:	401a      	ands	r2, r3
 8000e54:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <SystemClock_Config+0xe8>)
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	0109      	lsls	r1, r1, #4
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e5e:	f000 fde7 	bl	8001a30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e62:	4b29      	ldr	r3, [pc, #164]	@ (8000f08 <SystemClock_Config+0xf0>)
 8000e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e66:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <SystemClock_Config+0xf0>)
 8000e68:	4926      	ldr	r1, [pc, #152]	@ (8000f04 <SystemClock_Config+0xec>)
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2214      	movs	r2, #20
 8000e72:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	0052      	lsls	r2, r2, #1
 8000e7a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e7c:	0021      	movs	r1, r4
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2201      	movs	r2, #1
 8000e82:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fdd7 	bl	8001a4c <HAL_RCC_OscConfig>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ea2:	f000 f9c5 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	2118      	movs	r1, #24
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	220f      	movs	r2, #15
 8000eac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2280      	movs	r2, #128	@ 0x80
 8000eb8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2100      	movs	r1, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 f93a 	bl	8002144 <HAL_RCC_ClockConfig>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ed4:	f000 f9ac 	bl	8001230 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2220      	movs	r2, #32
 8000edc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	0252      	lsls	r2, r2, #9
 8000ee4:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 fb19 	bl	8002520 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000ef2:	f000 f99d 	bl	8001230 <Error_Handler>
  }
}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b019      	add	sp, #100	@ 0x64
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	40007000 	.word	0x40007000
 8000f04:	ffffe7ff 	.word	0xffffe7ff
 8000f08:	40021000 	.word	0x40021000

08000f0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b090      	sub	sp, #64	@ 0x40
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f12:	232c      	movs	r3, #44	@ 0x2c
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	0018      	movs	r0, r3
 8000f18:	2314      	movs	r3, #20
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f002 fee7 	bl	8003cf0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000f22:	2328      	movs	r3, #40	@ 0x28
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	2328      	movs	r3, #40	@ 0x28
 8000f30:	001a      	movs	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f002 fedc 	bl	8003cf0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f38:	4b45      	ldr	r3, [pc, #276]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f3a:	4a46      	ldr	r2, [pc, #280]	@ (8001054 <MX_RTC_Init+0x148>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f3e:	4b44      	ldr	r3, [pc, #272]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f44:	4b42      	ldr	r3, [pc, #264]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f46:	227f      	movs	r2, #127	@ 0x7f
 8000f48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f4a:	4b41      	ldr	r3, [pc, #260]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f4c:	22ff      	movs	r2, #255	@ 0xff
 8000f4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f50:	4b3f      	ldr	r3, [pc, #252]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f56:	4b3e      	ldr	r3, [pc, #248]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f68:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 fc04 	bl	8002778 <HAL_RTC_Init>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000f74:	f000 f95c 	bl	8001230 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f78:	212c      	movs	r1, #44	@ 0x2c
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001050 <MX_RTC_Init+0x144>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 fc86 	bl	80028b0 <HAL_RTC_SetTime>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000fa8:	f000 f942 	bl	8001230 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fac:	2128      	movs	r1, #40	@ 0x28
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fc6:	1879      	adds	r1, r7, r1
 8000fc8:	4b21      	ldr	r3, [pc, #132]	@ (8001050 <MX_RTC_Init+0x144>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 fd19 	bl	8002a04 <HAL_RTC_SetDate>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000fd6:	f000 f92b 	bl	8001230 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000fe6:	003b      	movs	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001004:	003b      	movs	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001010:	003b      	movs	r3, r7
 8001012:	2220      	movs	r2, #32
 8001014:	2101      	movs	r1, #1
 8001016:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001018:	003b      	movs	r3, r7
 800101a:	2280      	movs	r2, #128	@ 0x80
 800101c:	0052      	lsls	r2, r2, #1
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001020:	0039      	movs	r1, r7
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_RTC_Init+0x144>)
 8001024:	2201      	movs	r2, #1
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fd80 	bl	8002b2c <HAL_RTC_SetAlarm_IT>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d001      	beq.n	8001034 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001030:	f000 f8fe 	bl	8001230 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_RTC_Init+0x144>)
 8001036:	2204      	movs	r2, #4
 8001038:	2100      	movs	r1, #0
 800103a:	0018      	movs	r0, r3
 800103c:	f001 ffe6 	bl	800300c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 8001044:	f000 f8f4 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b010      	add	sp, #64	@ 0x40
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000003c 	.word	0x2000003c
 8001054:	40002800 	.word	0x40002800

08001058 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	2318      	movs	r3, #24
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	0018      	movs	r0, r3
 8001064:	2310      	movs	r3, #16
 8001066:	001a      	movs	r2, r3
 8001068:	2100      	movs	r1, #0
 800106a:	f002 fe41 	bl	8003cf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	2310      	movs	r3, #16
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	0018      	movs	r0, r3
 8001074:	2308      	movs	r3, #8
 8001076:	001a      	movs	r2, r3
 8001078:	2100      	movs	r1, #0
 800107a:	f002 fe39 	bl	8003cf0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	003b      	movs	r3, r7
 8001080:	0018      	movs	r0, r3
 8001082:	2310      	movs	r3, #16
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f002 fe32 	bl	8003cf0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800108c:	4b30      	ldr	r3, [pc, #192]	@ (8001150 <MX_TIM2_Init+0xf8>)
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	05d2      	lsls	r2, r2, #23
 8001092:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <MX_TIM2_Init+0xf8>)
 8001096:	2207      	movs	r2, #7
 8001098:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <MX_TIM2_Init+0xf8>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 80010a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <MX_TIM2_Init+0xf8>)
 80010a2:	2207      	movs	r2, #7
 80010a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <MX_TIM2_Init+0xf8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_TIM2_Init+0xf8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b2:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <MX_TIM2_Init+0xf8>)
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 f8c1 	bl	800323c <HAL_TIM_Base_Init>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010be:	f000 f8b7 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	2118      	movs	r1, #24
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	0152      	lsls	r2, r2, #5
 80010ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010cc:	187a      	adds	r2, r7, r1
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <MX_TIM2_Init+0xf8>)
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 faca 	bl	800366c <HAL_TIM_ConfigClockSource>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80010dc:	f000 f8a8 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_TIM2_Init+0xf8>)
 80010e2:	0018      	movs	r0, r3
 80010e4:	f002 f8ea 	bl	80032bc <HAL_TIM_PWM_Init>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80010ec:	f000 f8a0 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2110      	movs	r1, #16
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fe:	187a      	adds	r2, r7, r1
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_TIM2_Init+0xf8>)
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f002 fd9b 	bl	8003c40 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800110e:	f000 f88f 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	003b      	movs	r3, r7
 8001114:	2260      	movs	r2, #96	@ 0x60
 8001116:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3;
 8001118:	003b      	movs	r3, r7
 800111a:	2203      	movs	r2, #3
 800111c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	003b      	movs	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	003b      	movs	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112a:	0039      	movs	r1, r7
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <MX_TIM2_Init+0xf8>)
 800112e:	2200      	movs	r2, #0
 8001130:	0018      	movs	r0, r3
 8001132:	f002 f9d5 	bl	80034e0 <HAL_TIM_PWM_ConfigChannel>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800113a:	f000 f879 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <MX_TIM2_Init+0xf8>)
 8001140:	0018      	movs	r0, r3
 8001142:	f000 f8c5 	bl	80012d0 <HAL_TIM_MspPostInit>

}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b00a      	add	sp, #40	@ 0x28
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	20000060 	.word	0x20000060

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b089      	sub	sp, #36	@ 0x24
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	240c      	movs	r4, #12
 800115c:	193b      	adds	r3, r7, r4
 800115e:	0018      	movs	r0, r3
 8001160:	2314      	movs	r3, #20
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f002 fdc3 	bl	8003cf0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <MX_GPIO_Init+0xd8>)
 800116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800116e:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <MX_GPIO_Init+0xd8>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001176:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <MX_GPIO_Init+0xd8>)
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	2204      	movs	r2, #4
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <MX_GPIO_Init+0xd8>)
 8001184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001186:	4b29      	ldr	r3, [pc, #164]	@ (800122c <MX_GPIO_Init+0xd8>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800118e:	4b27      	ldr	r3, [pc, #156]	@ (800122c <MX_GPIO_Init+0xd8>)
 8001190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA_Pin|SCLK_Pin|XLAT_Pin, GPIO_PIN_RESET);
 800119a:	23a0      	movs	r3, #160	@ 0xa0
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	2200      	movs	r2, #0
 80011a0:	210e      	movs	r1, #14
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 fc27 	bl	80019f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLANK_GPIO_Port, BLANK_Pin, GPIO_PIN_SET);
 80011a8:	23a0      	movs	r3, #160	@ 0xa0
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	2201      	movs	r2, #1
 80011ae:	2110      	movs	r1, #16
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 fc20 	bl	80019f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DATA_Pin SCLK_Pin XLAT_Pin BLANK_Pin */
  GPIO_InitStruct.Pin = DATA_Pin|SCLK_Pin|XLAT_Pin|BLANK_Pin;
 80011b6:	193b      	adds	r3, r7, r4
 80011b8:	221e      	movs	r2, #30
 80011ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	2201      	movs	r2, #1
 80011c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	193b      	adds	r3, r7, r4
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	193a      	adds	r2, r7, r4
 80011d0:	23a0      	movs	r3, #160	@ 0xa0
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fa82 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEC_UNID_Pin SEC_DEZ_Pin MIN_UNID_Pin MIN_DEZ_Pin
                           HOUR_UNID_Pin HOUR_DEZ_Pin SEL_MODE_Pin CONFIRM_Pin */
  GPIO_InitStruct.Pin = SEC_UNID_Pin|SEC_DEZ_Pin|MIN_UNID_Pin|MIN_DEZ_Pin
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	22ff      	movs	r2, #255	@ 0xff
 80011e0:	0152      	lsls	r2, r2, #5
 80011e2:	601a      	str	r2, [r3, #0]
                          |HOUR_UNID_Pin|HOUR_DEZ_Pin|SEL_MODE_Pin|CONFIRM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	193a      	adds	r2, r7, r4
 80011f2:	23a0      	movs	r3, #160	@ 0xa0
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fa71 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 80011fe:	0021      	movs	r1, r4
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2280      	movs	r2, #128	@ 0x80
 8001204:	0212      	lsls	r2, r2, #8
 8001206:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2202      	movs	r2, #2
 8001212:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001214:	187a      	adds	r2, r7, r1
 8001216:	23a0      	movs	r3, #160	@ 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f000 fa5f 	bl	80016e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b009      	add	sp, #36	@ 0x24
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	40021000 	.word	0x40021000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>

0800123c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <HAL_MspInit+0x24>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_MspInit+0x24>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_MspInit+0x24>)
 800124e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_MspInit+0x24>)
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	0549      	lsls	r1, r1, #21
 8001256:	430a      	orrs	r2, r1
 8001258:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_RTC_MspInit+0x38>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10e      	bne.n	8001294 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_RTC_MspInit+0x3c>)
 8001278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_RTC_MspInit+0x3c>)
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	02c9      	lsls	r1, r1, #11
 8001280:	430a      	orrs	r2, r1
 8001282:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2002      	movs	r0, #2
 800128a:	f000 f9f7 	bl	800167c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800128e:	2002      	movs	r0, #2
 8001290:	f000 fa09 	bl	80016a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40002800 	.word	0x40002800
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d105      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <HAL_TIM_Base_MspInit+0x28>)
 80012ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_TIM_Base_MspInit+0x28>)
 80012be:	2101      	movs	r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	240c      	movs	r4, #12
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	0018      	movs	r0, r3
 80012de:	2314      	movs	r3, #20
 80012e0:	001a      	movs	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f002 fd04 	bl	8003cf0 <memset>
  if(htim->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d122      	bne.n	800133a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_TIM_MspPostInit+0x74>)
 80012f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_TIM_MspPostInit+0x74>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <HAL_TIM_MspPostInit+0x74>)
 8001302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800130c:	0021      	movs	r1, r4
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2202      	movs	r2, #2
 8001318:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2202      	movs	r2, #2
 800132a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800132c:	187a      	adds	r2, r7, r1
 800132e:	23a0      	movs	r3, #160	@ 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	0011      	movs	r1, r2
 8001334:	0018      	movs	r0, r3
 8001336:	f000 f9d3 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b009      	add	sp, #36	@ 0x24
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	e7fd      	b.n	800134c <NMI_Handler+0x4>

08001350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	e7fd      	b.n	8001354 <HardFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f898 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <RTC_IRQHandler+0x1c>)
 8001382:	0018      	movs	r0, r3
 8001384:	f001 fd34 	bl	8002df0 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <RTC_IRQHandler+0x1c>)
 800138a:	0018      	movs	r0, r3
 800138c:	f001 ff16 	bl	80031bc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	2000003c 	.word	0x2000003c

0800139c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <Reset_Handler>:
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <LoopForever+0x2>)
 80013aa:	4685      	mov	sp, r0
 80013ac:	f7ff fff6 	bl	800139c <SystemInit>
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopForever+0x6>)
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopForever+0xa>)
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopForever+0xe>)
 80013b6:	2300      	movs	r3, #0
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:
 80013ba:	58d4      	ldr	r4, [r2, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:
 80013c0:	18c4      	adds	r4, r0, r3
 80013c2:	428c      	cmp	r4, r1
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopForever+0x12>)
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopForever+0x16>)
 80013ca:	2300      	movs	r3, #0
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:
 80013d2:	42a2      	cmp	r2, r4
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>
 80013d6:	f002 fc93 	bl	8003d00 <__libc_init_array>
 80013da:	f7ff fd05 	bl	8000de8 <main>

080013de <LoopForever>:
 80013de:	e7fe      	b.n	80013de <LoopForever>
 80013e0:	20002000 	.word	0x20002000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000010 	.word	0x20000010
 80013ec:	08003d8c 	.word	0x08003d8c
 80013f0:	20000010 	.word	0x20000010
 80013f4:	200000a4 	.word	0x200000a4

080013f8 <ADC1_COMP_IRQHandler>:
 80013f8:	e7fe      	b.n	80013f8 <ADC1_COMP_IRQHandler>
	...

080013fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_Init+0x3c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_Init+0x3c>)
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f811 	bl	800143c <HAL_InitTick>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d003      	beq.n	8001426 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e001      	b.n	800142a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001426:	f7ff ff09 	bl	800123c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_InitTick+0x5c>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_InitTick+0x60>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	0019      	movs	r1, r3
 800144e:	23fa      	movs	r3, #250	@ 0xfa
 8001450:	0098      	lsls	r0, r3, #2
 8001452:	f7fe fe59 	bl	8000108 <__udivsi3>
 8001456:	0003      	movs	r3, r0
 8001458:	0019      	movs	r1, r3
 800145a:	0020      	movs	r0, r4
 800145c:	f7fe fe54 	bl	8000108 <__udivsi3>
 8001460:	0003      	movs	r3, r0
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f92f 	bl	80016c6 <HAL_SYSTICK_Config>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e00f      	b.n	8001490 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d80b      	bhi.n	800148e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	2301      	movs	r3, #1
 800147a:	425b      	negs	r3, r3
 800147c:	2200      	movs	r2, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f8fc 	bl	800167c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_InitTick+0x64>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b003      	add	sp, #12
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	20000004 	.word	0x20000004
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	18d2      	adds	r2, r2, r3
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_IncTick+0x20>)
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	200000a0 	.word	0x200000a0

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	@ (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	200000a0 	.word	0x200000a0

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fff0 	bl	80014c8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	001a      	movs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	189b      	adds	r3, r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	f7ff ffe0 	bl	80014c8 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	46c0      	nop			@ (mov r8, r8)
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	2000000c 	.word	0x2000000c

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	0002      	movs	r2, r0
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b7f      	cmp	r3, #127	@ 0x7f
 8001536:	d809      	bhi.n	800154c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	001a      	movs	r2, r3
 800153e:	231f      	movs	r3, #31
 8001540:	401a      	ands	r2, r3
 8001542:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <__NVIC_EnableIRQ+0x30>)
 8001544:	2101      	movs	r1, #1
 8001546:	4091      	lsls	r1, r2
 8001548:	000a      	movs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
  }
}
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b7f      	cmp	r3, #127	@ 0x7f
 800156c:	d828      	bhi.n	80015c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156e:	4a2f      	ldr	r2, [pc, #188]	@ (800162c <__NVIC_SetPriority+0xd4>)
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b25b      	sxtb	r3, r3
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	33c0      	adds	r3, #192	@ 0xc0
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	589b      	ldr	r3, [r3, r2]
 800157e:	1dfa      	adds	r2, r7, #7
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	0011      	movs	r1, r2
 8001584:	2203      	movs	r2, #3
 8001586:	400a      	ands	r2, r1
 8001588:	00d2      	lsls	r2, r2, #3
 800158a:	21ff      	movs	r1, #255	@ 0xff
 800158c:	4091      	lsls	r1, r2
 800158e:	000a      	movs	r2, r1
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	22ff      	movs	r2, #255	@ 0xff
 800159c:	401a      	ands	r2, r3
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	0018      	movs	r0, r3
 80015a4:	2303      	movs	r3, #3
 80015a6:	4003      	ands	r3, r0
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	481f      	ldr	r0, [pc, #124]	@ (800162c <__NVIC_SetPriority+0xd4>)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	430a      	orrs	r2, r1
 80015b8:	33c0      	adds	r3, #192	@ 0xc0
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015be:	e031      	b.n	8001624 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001630 <__NVIC_SetPriority+0xd8>)
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	0019      	movs	r1, r3
 80015c8:	230f      	movs	r3, #15
 80015ca:	400b      	ands	r3, r1
 80015cc:	3b08      	subs	r3, #8
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3306      	adds	r3, #6
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	18d3      	adds	r3, r2, r3
 80015d6:	3304      	adds	r3, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1dfa      	adds	r2, r7, #7
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	0011      	movs	r1, r2
 80015e0:	2203      	movs	r2, #3
 80015e2:	400a      	ands	r2, r1
 80015e4:	00d2      	lsls	r2, r2, #3
 80015e6:	21ff      	movs	r1, #255	@ 0xff
 80015e8:	4091      	lsls	r1, r2
 80015ea:	000a      	movs	r2, r1
 80015ec:	43d2      	mvns	r2, r2
 80015ee:	401a      	ands	r2, r3
 80015f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	019b      	lsls	r3, r3, #6
 80015f6:	22ff      	movs	r2, #255	@ 0xff
 80015f8:	401a      	ands	r2, r3
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	0018      	movs	r0, r3
 8001600:	2303      	movs	r3, #3
 8001602:	4003      	ands	r3, r0
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <__NVIC_SetPriority+0xd8>)
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	001c      	movs	r4, r3
 8001610:	230f      	movs	r3, #15
 8001612:	4023      	ands	r3, r4
 8001614:	3b08      	subs	r3, #8
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	430a      	orrs	r2, r1
 800161a:	3306      	adds	r3, #6
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	18c3      	adds	r3, r0, r3
 8001620:	3304      	adds	r3, #4
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b003      	add	sp, #12
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	045b      	lsls	r3, r3, #17
 8001644:	429a      	cmp	r2, r3
 8001646:	d301      	bcc.n	800164c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001648:	2301      	movs	r3, #1
 800164a:	e010      	b.n	800166e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164c:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <SysTick_Config+0x44>)
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	3a01      	subs	r2, #1
 8001652:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001654:	2301      	movs	r3, #1
 8001656:	425b      	negs	r3, r3
 8001658:	2103      	movs	r1, #3
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff ff7c 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <SysTick_Config+0x44>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <SysTick_Config+0x44>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	210f      	movs	r1, #15
 8001688:	187b      	adds	r3, r7, r1
 800168a:	1c02      	adds	r2, r0, #0
 800168c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	187b      	adds	r3, r7, r1
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	0011      	movs	r1, r2
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	0002      	movs	r2, r0
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff ff33 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ffaf 	bl	8001634 <SysTick_Config>
 80016d6:	0003      	movs	r3, r0
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80016f6:	e149      	b.n	800198c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <HAL_GPIO_Init+0x30>
 800170e:	e13a      	b.n	8001986 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
 8001718:	2b01      	cmp	r3, #1
 800171a:	d005      	beq.n	8001728 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001724:	2b02      	cmp	r3, #2
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	409a      	lsls	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	2201      	movs	r2, #1
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	4013      	ands	r3, r2
 8001792:	2b03      	cmp	r3, #3
 8001794:	d017      	beq.n	80017c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d123      	bne.n	800181a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	58d3      	ldr	r3, [r2, r3]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2207      	movs	r2, #7
 80017e4:	4013      	ands	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2107      	movs	r1, #7
 80017fe:	400b      	ands	r3, r1
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	6939      	ldr	r1, [r7, #16]
 8001818:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2203      	movs	r2, #3
 8001838:	401a      	ands	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	23c0      	movs	r3, #192	@ 0xc0
 8001854:	029b      	lsls	r3, r3, #10
 8001856:	4013      	ands	r3, r2
 8001858:	d100      	bne.n	800185c <HAL_GPIO_Init+0x17c>
 800185a:	e094      	b.n	8001986 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185c:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 800185e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001860:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001862:	2101      	movs	r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001868:	4a4f      	ldr	r2, [pc, #316]	@ (80019a8 <HAL_GPIO_Init+0x2c8>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	589b      	ldr	r3, [r3, r2]
 8001874:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2203      	movs	r2, #3
 800187a:	4013      	ands	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	409a      	lsls	r2, r3
 8001882:	0013      	movs	r3, r2
 8001884:	43da      	mvns	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	23a0      	movs	r3, #160	@ 0xa0
 8001890:	05db      	lsls	r3, r3, #23
 8001892:	429a      	cmp	r2, r3
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1de>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a44      	ldr	r2, [pc, #272]	@ (80019ac <HAL_GPIO_Init+0x2cc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1da>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a43      	ldr	r2, [pc, #268]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1d6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a42      	ldr	r2, [pc, #264]	@ (80019b4 <HAL_GPIO_Init+0x2d4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1d2>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018be:	2300      	movs	r3, #0
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	2103      	movs	r1, #3
 80018c4:	400a      	ands	r2, r1
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	4093      	lsls	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d0:	4935      	ldr	r1, [pc, #212]	@ (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018de:	4b36      	ldr	r3, [pc, #216]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43da      	mvns	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	035b      	lsls	r3, r3, #13
 80018f6:	4013      	ands	r3, r2
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001902:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43da      	mvns	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	039b      	lsls	r3, r3, #14
 8001920:	4013      	ands	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	029b      	lsls	r3, r3, #10
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <HAL_GPIO_Init+0x2d8>)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	40da      	lsrs	r2, r3
 8001994:	1e13      	subs	r3, r2, #0
 8001996:	d000      	beq.n	800199a <HAL_GPIO_Init+0x2ba>
 8001998:	e6ae      	b.n	80016f8 <HAL_GPIO_Init+0x18>
  }
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b006      	add	sp, #24
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	50000400 	.word	0x50000400
 80019b0:	50000800 	.word	0x50000800
 80019b4:	50001c00 	.word	0x50001c00
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	000a      	movs	r2, r1
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	1cba      	adds	r2, r7, #2
 80019d0:	8812      	ldrh	r2, [r2, #0]
 80019d2:	4013      	ands	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80019d6:	230f      	movs	r3, #15
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e0:	230f      	movs	r3, #15
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80019e8:	230f      	movs	r3, #15
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	781b      	ldrb	r3, [r3, #0]
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	0008      	movs	r0, r1
 8001a00:	0011      	movs	r1, r2
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	1c02      	adds	r2, r0, #0
 8001a06:	801a      	strh	r2, [r3, #0]
 8001a08:	1c7b      	adds	r3, r7, #1
 8001a0a:	1c0a      	adds	r2, r1, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a0e:	1c7b      	adds	r3, r7, #1
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	1cbb      	adds	r3, r7, #2
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a1e:	e003      	b.n	8001a28 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a20:	1cbb      	adds	r3, r7, #2
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a3a:	2180      	movs	r1, #128	@ 0x80
 8001a3c:	0049      	lsls	r1, r1, #1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40007000 	.word	0x40007000

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f000 fb6c 	bl	8002138 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a60:	4bc8      	ldr	r3, [pc, #800]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	220c      	movs	r2, #12
 8001a66:	4013      	ands	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6a:	4bc6      	ldr	r3, [pc, #792]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x36>
 8001a80:	e07d      	b.n	8001b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d007      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d112      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x68>
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d10d      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	4bba      	ldr	r3, [pc, #744]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5a>
 8001aa4:	e06a      	b.n	8001b7c <HAL_RCC_OscConfig+0x130>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d166      	bne.n	8001b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f000 fb42 	bl	8002138 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	025b      	lsls	r3, r3, #9
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x84>
 8001ac0:	4bb0      	ldr	r3, [pc, #704]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4baf      	ldr	r3, [pc, #700]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	0249      	lsls	r1, r1, #9
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e027      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	23a0      	movs	r3, #160	@ 0xa0
 8001ad6:	02db      	lsls	r3, r3, #11
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10e      	bne.n	8001afa <HAL_RCC_OscConfig+0xae>
 8001adc:	4ba9      	ldr	r3, [pc, #676]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4ba8      	ldr	r3, [pc, #672]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	2180      	movs	r1, #128	@ 0x80
 8001ae4:	02c9      	lsls	r1, r1, #11
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4ba6      	ldr	r3, [pc, #664]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4ba5      	ldr	r3, [pc, #660]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001af0:	2180      	movs	r1, #128	@ 0x80
 8001af2:	0249      	lsls	r1, r1, #9
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e012      	b.n	8001b20 <HAL_RCC_OscConfig+0xd4>
 8001afa:	4ba2      	ldr	r3, [pc, #648]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4ba1      	ldr	r3, [pc, #644]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b00:	49a1      	ldr	r1, [pc, #644]	@ (8001d88 <HAL_RCC_OscConfig+0x33c>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4b9f      	ldr	r3, [pc, #636]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4b9b      	ldr	r3, [pc, #620]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b9a      	ldr	r3, [pc, #616]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	499c      	ldr	r1, [pc, #624]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d014      	beq.n	8001b52 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fcce 	bl	80014c8 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b32:	f7ff fcc9 	bl	80014c8 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b64      	cmp	r3, #100	@ 0x64
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e2f9      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b44:	4b8f      	ldr	r3, [pc, #572]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	029b      	lsls	r3, r3, #10
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0xe6>
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fcb9 	bl	80014c8 <HAL_GetTick>
 8001b56:	0003      	movs	r3, r0
 8001b58:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fcb4 	bl	80014c8 <HAL_GetTick>
 8001b60:	0002      	movs	r2, r0
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e2e4      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b6e:	4b85      	ldr	r3, [pc, #532]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	029b      	lsls	r3, r3, #10
 8001b76:	4013      	ands	r3, r2
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x110>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0x13e>
 8001b88:	e099      	b.n	8001cbe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	2220      	movs	r2, #32
 8001b94:	4013      	ands	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b98:	4b7a      	ldr	r3, [pc, #488]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b79      	ldr	r3, [pc, #484]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	4393      	bics	r3, r2
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d13e      	bne.n	8001c36 <HAL_RCC_OscConfig+0x1ea>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d13b      	bne.n	8001c36 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bbe:	4b71      	ldr	r3, [pc, #452]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x186>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e2b2      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8001d90 <HAL_RCC_OscConfig+0x344>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	021a      	lsls	r2, r3, #8
 8001be2:	4b68      	ldr	r3, [pc, #416]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2209      	movs	r2, #9
 8001bee:	4393      	bics	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	4b64      	ldr	r3, [pc, #400]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 fbeb 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8001bfe:	0001      	movs	r1, r0
 8001c00:	4b60      	ldr	r3, [pc, #384]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	220f      	movs	r2, #15
 8001c08:	4013      	ands	r3, r2
 8001c0a:	4a62      	ldr	r2, [pc, #392]	@ (8001d94 <HAL_RCC_OscConfig+0x348>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	000a      	movs	r2, r1
 8001c10:	40da      	lsrs	r2, r3
 8001c12:	4b61      	ldr	r3, [pc, #388]	@ (8001d98 <HAL_RCC_OscConfig+0x34c>)
 8001c14:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c16:	4b61      	ldr	r3, [pc, #388]	@ (8001d9c <HAL_RCC_OscConfig+0x350>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2513      	movs	r5, #19
 8001c1c:	197c      	adds	r4, r7, r5
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fc0c 	bl	800143c <HAL_InitTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c28:	197b      	adds	r3, r7, r5
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d046      	beq.n	8001cbe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001c30:	197b      	adds	r3, r7, r5
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	e280      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d027      	beq.n	8001c8c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c3c:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2209      	movs	r2, #9
 8001c42:	4393      	bics	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	4b4f      	ldr	r3, [pc, #316]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fc3b 	bl	80014c8 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff fc36 	bl	80014c8 <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e266      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c6a:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0f1      	beq.n	8001c58 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b43      	ldr	r3, [pc, #268]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a45      	ldr	r2, [pc, #276]	@ (8001d90 <HAL_RCC_OscConfig+0x344>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	021a      	lsls	r2, r3, #8
 8001c84:	4b3f      	ldr	r3, [pc, #252]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	e018      	b.n	8001cbe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b3c      	ldr	r3, [pc, #240]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	438a      	bics	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc16 	bl	80014c8 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fc11 	bl	80014c8 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e241      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cb4:	4b33      	ldr	r3, [pc, #204]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d1f1      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d100      	bne.n	8001cca <HAL_RCC_OscConfig+0x27e>
 8001cc8:	e0a1      	b.n	8001e0e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d140      	bne.n	8001d52 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x29c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e227      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a2c      	ldr	r2, [pc, #176]	@ (8001da0 <HAL_RCC_OscConfig+0x354>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	0a19      	lsrs	r1, r3, #8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	061a      	lsls	r2, r3, #24
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	0b5b      	lsrs	r3, r3, #13
 8001d16:	3301      	adds	r3, #1
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	0212      	lsls	r2, r2, #8
 8001d1c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	210f      	movs	r1, #15
 8001d26:	400b      	ands	r3, r1
 8001d28:	491a      	ldr	r1, [pc, #104]	@ (8001d94 <HAL_RCC_OscConfig+0x348>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_RCC_OscConfig+0x34c>)
 8001d30:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_RCC_OscConfig+0x350>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2513      	movs	r5, #19
 8001d38:	197c      	adds	r4, r7, r5
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fb7e 	bl	800143c <HAL_InitTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d44:	197b      	adds	r3, r7, r5
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d060      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001d4c:	197b      	adds	r3, r7, r5
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	e1f2      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d03f      	beq.n	8001dda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001d60:	2180      	movs	r1, #128	@ 0x80
 8001d62:	0049      	lsls	r1, r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fbae 	bl	80014c8 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d70:	e018      	b.n	8001da4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d72:	f7ff fba9 	bl	80014c8 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d911      	bls.n	8001da4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1d9      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	fffeffff 	.word	0xfffeffff
 8001d8c:	fffbffff 	.word	0xfffbffff
 8001d90:	ffffe0ff 	.word	0xffffe0ff
 8001d94:	08003d60 	.word	0x08003d60
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001da4:	4bc9      	ldr	r3, [pc, #804]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0e0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db0:	4bc6      	ldr	r3, [pc, #792]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4ac6      	ldr	r2, [pc, #792]	@ (80020d0 <HAL_RCC_OscConfig+0x684>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	4bc3      	ldr	r3, [pc, #780]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc4:	4bc1      	ldr	r3, [pc, #772]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	0a19      	lsrs	r1, r3, #8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	061a      	lsls	r2, r3, #24
 8001dd2:	4bbe      	ldr	r3, [pc, #760]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	e019      	b.n	8001e0e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dda:	4bbc      	ldr	r3, [pc, #752]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4bbb      	ldr	r3, [pc, #748]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001de0:	49bc      	ldr	r1, [pc, #752]	@ (80020d4 <HAL_RCC_OscConfig+0x688>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff fb6f 	bl	80014c8 <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df0:	f7ff fb6a 	bl	80014c8 <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e19a      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e02:	4bb2      	ldr	r3, [pc, #712]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2208      	movs	r2, #8
 8001e14:	4013      	ands	r3, r2
 8001e16:	d036      	beq.n	8001e86 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d019      	beq.n	8001e54 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e20:	4baa      	ldr	r3, [pc, #680]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e24:	4ba9      	ldr	r3, [pc, #676]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fb4c 	bl	80014c8 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff fb47 	bl	80014c8 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e177      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e48:	4ba0      	ldr	r3, [pc, #640]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d0f1      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3ea>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e54:	4b9d      	ldr	r3, [pc, #628]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e58:	4b9c      	ldr	r3, [pc, #624]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fb32 	bl	80014c8 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fb2d 	bl	80014c8 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e15d      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e7c:	4b93      	ldr	r3, [pc, #588]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <HAL_RCC_OscConfig+0x446>
 8001e90:	e0ae      	b.n	8001ff0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e92:	2023      	movs	r0, #35	@ 0x23
 8001e94:	183b      	adds	r3, r7, r0
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b8c      	ldr	r3, [pc, #560]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	055b      	lsls	r3, r3, #21
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b89      	ldr	r3, [pc, #548]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	0549      	lsls	r1, r1, #21
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001eb4:	183b      	adds	r3, r7, r0
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b87      	ldr	r3, [pc, #540]	@ (80020d8 <HAL_RCC_OscConfig+0x68c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d11a      	bne.n	8001efc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b84      	ldr	r3, [pc, #528]	@ (80020d8 <HAL_RCC_OscConfig+0x68c>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b83      	ldr	r3, [pc, #524]	@ (80020d8 <HAL_RCC_OscConfig+0x68c>)
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	0049      	lsls	r1, r1, #1
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff faf8 	bl	80014c8 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7ff faf3 	bl	80014c8 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	@ 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e123      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b79      	ldr	r3, [pc, #484]	@ (80020d8 <HAL_RCC_OscConfig+0x68c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4cc>
 8001f08:	4b70      	ldr	r3, [pc, #448]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	0049      	lsls	r1, r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f16:	e031      	b.n	8001f7c <HAL_RCC_OscConfig+0x530>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4ee>
 8001f20:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f24:	4b69      	ldr	r3, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f26:	496b      	ldr	r1, [pc, #428]	@ (80020d4 <HAL_RCC_OscConfig+0x688>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f2c:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f30:	4b66      	ldr	r3, [pc, #408]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f32:	496a      	ldr	r1, [pc, #424]	@ (80020dc <HAL_RCC_OscConfig+0x690>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f38:	e020      	b.n	8001f7c <HAL_RCC_OscConfig+0x530>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	23a0      	movs	r3, #160	@ 0xa0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d10e      	bne.n	8001f64 <HAL_RCC_OscConfig+0x518>
 8001f46:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f4a:	4b60      	ldr	r3, [pc, #384]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f4c:	2180      	movs	r1, #128	@ 0x80
 8001f4e:	00c9      	lsls	r1, r1, #3
 8001f50:	430a      	orrs	r2, r1
 8001f52:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f54:	4b5d      	ldr	r3, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f58:	4b5c      	ldr	r3, [pc, #368]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	0049      	lsls	r1, r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x530>
 8001f64:	4b59      	ldr	r3, [pc, #356]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f68:	4b58      	ldr	r3, [pc, #352]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f6a:	495a      	ldr	r1, [pc, #360]	@ (80020d4 <HAL_RCC_OscConfig+0x688>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f70:	4b56      	ldr	r3, [pc, #344]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f74:	4b55      	ldr	r3, [pc, #340]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001f76:	4959      	ldr	r1, [pc, #356]	@ (80020dc <HAL_RCC_OscConfig+0x690>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff faa0 	bl	80014c8 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fa9b 	bl	80014c8 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	4a51      	ldr	r2, [pc, #324]	@ (80020e0 <HAL_RCC_OscConfig+0x694>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0ca      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001fa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d0ef      	beq.n	8001f8e <HAL_RCC_OscConfig+0x542>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fa8a 	bl	80014c8 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fa85 	bl	80014c8 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a46      	ldr	r2, [pc, #280]	@ (80020e0 <HAL_RCC_OscConfig+0x694>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0b4      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fce:	4b3f      	ldr	r3, [pc, #252]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001fd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1ef      	bne.n	8001fba <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fda:	2323      	movs	r3, #35	@ 0x23
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe4:	4b39      	ldr	r3, [pc, #228]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fe8:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8001fea:	493e      	ldr	r1, [pc, #248]	@ (80020e4 <HAL_RCC_OscConfig+0x698>)
 8001fec:	400a      	ands	r2, r1
 8001fee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5ae>
 8001ff8:	e09d      	b.n	8002136 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d100      	bne.n	8002002 <HAL_RCC_OscConfig+0x5b6>
 8002000:	e076      	b.n	80020f0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	2b02      	cmp	r3, #2
 8002008:	d145      	bne.n	8002096 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b30      	ldr	r3, [pc, #192]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8002010:	4935      	ldr	r1, [pc, #212]	@ (80020e8 <HAL_RCC_OscConfig+0x69c>)
 8002012:	400a      	ands	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fa57 	bl	80014c8 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff fa52 	bl	80014c8 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e082      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002032:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	049b      	lsls	r3, r3, #18
 800203a:	4013      	ands	r3, r2
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203e:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <HAL_RCC_OscConfig+0x6a0>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	431a      	orrs	r2, r3
 8002058:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205e:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8002064:	2180      	movs	r1, #128	@ 0x80
 8002066:	0449      	lsls	r1, r1, #17
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fa2c 	bl	80014c8 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff fa27 	bl	80014c8 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e057      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002088:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	049b      	lsls	r3, r3, #18
 8002090:	4013      	ands	r3, r2
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x62a>
 8002094:	e04f      	b.n	8002136 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 800209c:	4912      	ldr	r1, [pc, #72]	@ (80020e8 <HAL_RCC_OscConfig+0x69c>)
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fa11 	bl	80014c8 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff fa0c 	bl	80014c8 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e03c      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020be:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_RCC_OscConfig+0x680>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	049b      	lsls	r3, r3, #18
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x660>
 80020ca:	e034      	b.n	8002136 <HAL_RCC_OscConfig+0x6ea>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	ffff1fff 	.word	0xffff1fff
 80020d4:	fffffeff 	.word	0xfffffeff
 80020d8:	40007000 	.word	0x40007000
 80020dc:	fffffbff 	.word	0xfffffbff
 80020e0:	00001388 	.word	0x00001388
 80020e4:	efffffff 	.word	0xefffffff
 80020e8:	feffffff 	.word	0xfeffffff
 80020ec:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fc:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_RCC_OscConfig+0x6f4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	401a      	ands	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	429a      	cmp	r2, r3
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	23f0      	movs	r3, #240	@ 0xf0
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	23c0      	movs	r3, #192	@ 0xc0
 8002126:	041b      	lsls	r3, r3, #16
 8002128:	401a      	ands	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b00a      	add	sp, #40	@ 0x28
 800213e:	bdb0      	pop	{r4, r5, r7, pc}
 8002140:	40021000 	.word	0x40021000

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e128      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b96      	ldr	r3, [pc, #600]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d91e      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b93      	ldr	r3, [pc, #588]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	4393      	bics	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	4b90      	ldr	r3, [pc, #576]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002178:	f7ff f9a6 	bl	80014c8 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002180:	e009      	b.n	8002196 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7ff f9a1 	bl	80014c8 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	4a8a      	ldr	r2, [pc, #552]	@ (80023b8 <HAL_RCC_ClockConfig+0x274>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e109      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b87      	ldr	r3, [pc, #540]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ae:	4b83      	ldr	r3, [pc, #524]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	22f0      	movs	r2, #240	@ 0xf0
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_ClockConfig+0x8a>
 80021cc:	e089      	b.n	80022e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021d6:	4b79      	ldr	r3, [pc, #484]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	029b      	lsls	r3, r3, #10
 80021de:	4013      	ands	r3, r2
 80021e0:	d120      	bne.n	8002224 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0e1      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ee:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	049b      	lsls	r3, r3, #18
 80021f6:	4013      	ands	r3, r2
 80021f8:	d114      	bne.n	8002224 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0d5      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d106      	bne.n	8002214 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002206:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2204      	movs	r2, #4
 800220c:	4013      	ands	r3, r2
 800220e:	d109      	bne.n	8002224 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0ca      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002214:	4b69      	ldr	r3, [pc, #420]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0c2      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002224:	4b65      	ldr	r3, [pc, #404]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2203      	movs	r2, #3
 800222a:	4393      	bics	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4b62      	ldr	r3, [pc, #392]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff f946 	bl	80014c8 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d111      	bne.n	800226c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	e009      	b.n	800225e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224a:	f7ff f93d 	bl	80014c8 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	4a58      	ldr	r2, [pc, #352]	@ (80023b8 <HAL_RCC_ClockConfig+0x274>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0a5      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800225e:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	220c      	movs	r2, #12
 8002264:	4013      	ands	r3, r2
 8002266:	2b08      	cmp	r3, #8
 8002268:	d1ef      	bne.n	800224a <HAL_RCC_ClockConfig+0x106>
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d111      	bne.n	8002298 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002274:	e009      	b.n	800228a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002276:	f7ff f927 	bl	80014c8 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	4a4d      	ldr	r2, [pc, #308]	@ (80023b8 <HAL_RCC_ClockConfig+0x274>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e08f      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228a:	4b4c      	ldr	r3, [pc, #304]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	220c      	movs	r2, #12
 8002290:	4013      	ands	r3, r2
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d1ef      	bne.n	8002276 <HAL_RCC_ClockConfig+0x132>
 8002296:	e024      	b.n	80022e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11b      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a2:	f7ff f911 	bl	80014c8 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a42      	ldr	r2, [pc, #264]	@ (80023b8 <HAL_RCC_ClockConfig+0x274>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e079      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b41      	ldr	r3, [pc, #260]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	220c      	movs	r2, #12
 80022bc:	4013      	ands	r3, r2
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d1ef      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x15e>
 80022c2:	e00e      	b.n	80022e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7ff f900 	bl	80014c8 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	4a3a      	ldr	r2, [pc, #232]	@ (80023b8 <HAL_RCC_ClockConfig+0x274>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e068      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022d8:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	220c      	movs	r2, #12
 80022de:	4013      	ands	r3, r2
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e2:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d21e      	bcs.n	800232e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f0:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4393      	bics	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	4b2e      	ldr	r3, [pc, #184]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002302:	f7ff f8e1 	bl	80014c8 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	e009      	b.n	8002320 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7ff f8dc 	bl	80014c8 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	4a28      	ldr	r2, [pc, #160]	@ (80023b8 <HAL_RCC_ClockConfig+0x274>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e044      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002320:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <HAL_RCC_ClockConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d1ee      	bne.n	800230c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2204      	movs	r2, #4
 8002334:	4013      	ands	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <HAL_RCC_ClockConfig+0x27c>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002348:	430a      	orrs	r2, r1
 800234a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2208      	movs	r2, #8
 8002352:	4013      	ands	r3, r2
 8002354:	d00a      	beq.n	800236c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4a1a      	ldr	r2, [pc, #104]	@ (80023c4 <HAL_RCC_ClockConfig+0x280>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00da      	lsls	r2, r3, #3
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236c:	f000 f832 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8002370:	0001      	movs	r1, r0
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_RCC_ClockConfig+0x278>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	220f      	movs	r2, #15
 800237a:	4013      	ands	r3, r2
 800237c:	4a12      	ldr	r2, [pc, #72]	@ (80023c8 <HAL_RCC_ClockConfig+0x284>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	000a      	movs	r2, r1
 8002382:	40da      	lsrs	r2, r3
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_RCC_ClockConfig+0x288>)
 8002386:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_RCC_ClockConfig+0x28c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	250b      	movs	r5, #11
 800238e:	197c      	adds	r4, r7, r5
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff f853 	bl	800143c <HAL_InitTick>
 8002396:	0003      	movs	r3, r0
 8002398:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800239a:	197b      	adds	r3, r7, r5
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	e000      	b.n	80023aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	40022000 	.word	0x40022000
 80023b8:	00001388 	.word	0x00001388
 80023bc:	40021000 	.word	0x40021000
 80023c0:	fffff8ff 	.word	0xfffff8ff
 80023c4:	ffffc7ff 	.word	0xffffc7ff
 80023c8:	08003d60 	.word	0x08003d60
 80023cc:	20000004 	.word	0x20000004
 80023d0:	20000008 	.word	0x20000008

080023d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b08e      	sub	sp, #56	@ 0x38
 80023d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023da:	4b4c      	ldr	r3, [pc, #304]	@ (800250c <HAL_RCC_GetSysClockFreq+0x138>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e2:	230c      	movs	r3, #12
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d014      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x40>
 80023ea:	d900      	bls.n	80023ee <HAL_RCC_GetSysClockFreq+0x1a>
 80023ec:	e07b      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x112>
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x24>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x3a>
 80023f6:	e076      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023f8:	4b44      	ldr	r3, [pc, #272]	@ (800250c <HAL_RCC_GetSysClockFreq+0x138>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	4013      	ands	r3, r2
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002402:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002404:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002406:	e07c      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002408:	4b42      	ldr	r3, [pc, #264]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x140>)
 800240a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800240c:	e079      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x144>)
 8002410:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002412:	e076      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002416:	0c9a      	lsrs	r2, r3, #18
 8002418:	230f      	movs	r3, #15
 800241a:	401a      	ands	r2, r3
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <HAL_RCC_GetSysClockFreq+0x148>)
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	0d9a      	lsrs	r2, r3, #22
 8002426:	2303      	movs	r3, #3
 8002428:	4013      	ands	r3, r2
 800242a:	3301      	adds	r3, #1
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_RCC_GetSysClockFreq+0x138>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	4013      	ands	r3, r2
 8002438:	d01a      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800243a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	4a35      	ldr	r2, [pc, #212]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x144>)
 8002444:	2300      	movs	r3, #0
 8002446:	69b8      	ldr	r0, [r7, #24]
 8002448:	69f9      	ldr	r1, [r7, #28]
 800244a:	f7fd fff3 	bl	8000434 <__aeabi_lmul>
 800244e:	0002      	movs	r2, r0
 8002450:	000b      	movs	r3, r1
 8002452:	0010      	movs	r0, r2
 8002454:	0019      	movs	r1, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f7fd ffc7 	bl	80003f4 <__aeabi_uldivmod>
 8002466:	0002      	movs	r2, r0
 8002468:	000b      	movs	r3, r1
 800246a:	0013      	movs	r3, r2
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
 800246e:	e037      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002470:	4b26      	ldr	r3, [pc, #152]	@ (800250c <HAL_RCC_GetSysClockFreq+0x138>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2210      	movs	r2, #16
 8002476:	4013      	ands	r3, r2
 8002478:	d01a      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4a23      	ldr	r2, [pc, #140]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002484:	2300      	movs	r3, #0
 8002486:	68b8      	ldr	r0, [r7, #8]
 8002488:	68f9      	ldr	r1, [r7, #12]
 800248a:	f7fd ffd3 	bl	8000434 <__aeabi_lmul>
 800248e:	0002      	movs	r2, r0
 8002490:	000b      	movs	r3, r1
 8002492:	0010      	movs	r0, r2
 8002494:	0019      	movs	r1, r3
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f7fd ffa7 	bl	80003f4 <__aeabi_uldivmod>
 80024a6:	0002      	movs	r2, r0
 80024a8:	000b      	movs	r3, r1
 80024aa:	0013      	movs	r3, r2
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ae:	e017      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b2:	0018      	movs	r0, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	0019      	movs	r1, r3
 80024b8:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x140>)
 80024ba:	2300      	movs	r3, #0
 80024bc:	f7fd ffba 	bl	8000434 <__aeabi_lmul>
 80024c0:	0002      	movs	r2, r0
 80024c2:	000b      	movs	r3, r1
 80024c4:	0010      	movs	r0, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	001c      	movs	r4, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	001d      	movs	r5, r3
 80024d0:	0022      	movs	r2, r4
 80024d2:	002b      	movs	r3, r5
 80024d4:	f7fd ff8e 	bl	80003f4 <__aeabi_uldivmod>
 80024d8:	0002      	movs	r2, r0
 80024da:	000b      	movs	r3, r1
 80024dc:	0013      	movs	r3, r2
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80024e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80024e4:	e00d      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_GetSysClockFreq+0x138>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	0b5b      	lsrs	r3, r3, #13
 80024ec:	2207      	movs	r2, #7
 80024ee:	4013      	ands	r3, r2
 80024f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	3301      	adds	r3, #1
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	0212      	lsls	r2, r2, #8
 80024fa:	409a      	lsls	r2, r3
 80024fc:	0013      	movs	r3, r2
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002500:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b00e      	add	sp, #56	@ 0x38
 800250a:	bdb0      	pop	{r4, r5, r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	003d0900 	.word	0x003d0900
 8002514:	00f42400 	.word	0x00f42400
 8002518:	007a1200 	.word	0x007a1200
 800251c:	08003d70 	.word	0x08003d70

08002520 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002528:	2017      	movs	r0, #23
 800252a:	183b      	adds	r3, r7, r0
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2220      	movs	r2, #32
 8002536:	4013      	ands	r3, r2
 8002538:	d100      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800253a:	e0c7      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253c:	4b84      	ldr	r3, [pc, #528]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800253e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	d109      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b81      	ldr	r3, [pc, #516]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800254a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800254c:	4b80      	ldr	r3, [pc, #512]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800254e:	2180      	movs	r1, #128	@ 0x80
 8002550:	0549      	lsls	r1, r1, #21
 8002552:	430a      	orrs	r2, r1
 8002554:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002556:	183b      	adds	r3, r7, r0
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b7d      	ldr	r3, [pc, #500]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4013      	ands	r3, r2
 8002566:	d11a      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002568:	4b7a      	ldr	r3, [pc, #488]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0049      	lsls	r1, r1, #1
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe ffa7 	bl	80014c8 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	e008      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe ffa2 	bl	80014c8 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0d9      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b70      	ldr	r3, [pc, #448]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4013      	ands	r3, r2
 800259c:	d0f0      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800259e:	4b6c      	ldr	r3, [pc, #432]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	23c0      	movs	r3, #192	@ 0xc0
 80025a4:	039b      	lsls	r3, r3, #14
 80025a6:	4013      	ands	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	23c0      	movs	r3, #192	@ 0xc0
 80025b0:	039b      	lsls	r3, r3, #14
 80025b2:	4013      	ands	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d013      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	23c0      	movs	r3, #192	@ 0xc0
 80025c0:	029b      	lsls	r3, r3, #10
 80025c2:	401a      	ands	r2, r3
 80025c4:	23c0      	movs	r3, #192	@ 0xc0
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d10a      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025cc:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	401a      	ands	r2, r3
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	429a      	cmp	r2, r3
 80025dc:	d101      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0b1      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80025e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025e6:	23c0      	movs	r3, #192	@ 0xc0
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d03b      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	23c0      	movs	r3, #192	@ 0xc0
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	4013      	ands	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d033      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	d02e      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800260e:	4b50      	ldr	r3, [pc, #320]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002612:	4a51      	ldr	r2, [pc, #324]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002618:	4b4d      	ldr	r3, [pc, #308]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800261a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800261c:	4b4c      	ldr	r3, [pc, #304]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800261e:	2180      	movs	r1, #128	@ 0x80
 8002620:	0309      	lsls	r1, r1, #12
 8002622:	430a      	orrs	r2, r1
 8002624:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002626:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262a:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800262c:	494b      	ldr	r1, [pc, #300]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800262e:	400a      	ands	r2, r1
 8002630:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002632:	4b47      	ldr	r3, [pc, #284]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d014      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe ff41 	bl	80014c8 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe ff3c 	bl	80014c8 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	4a42      	ldr	r2, [pc, #264]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e072      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002660:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002662:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4013      	ands	r3, r2
 800266a:	d0ef      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	23c0      	movs	r3, #192	@ 0xc0
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	401a      	ands	r2, r3
 8002680:	23c0      	movs	r3, #192	@ 0xc0
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	429a      	cmp	r2, r3
 8002686:	d10c      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002688:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a35      	ldr	r2, [pc, #212]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	23c0      	movs	r3, #192	@ 0xc0
 8002698:	039b      	lsls	r3, r3, #14
 800269a:	401a      	ands	r2, r3
 800269c:	4b2c      	ldr	r3, [pc, #176]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	23c0      	movs	r3, #192	@ 0xc0
 80026ac:	029b      	lsls	r3, r3, #10
 80026ae:	401a      	ands	r2, r3
 80026b0:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b6:	2317      	movs	r3, #23
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c4:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026c6:	4928      	ldr	r1, [pc, #160]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	220c      	movs	r2, #12
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2204      	movs	r2, #4
 80026f0:	4013      	ands	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f8:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002704:	430a      	orrs	r2, r1
 8002706:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2208      	movs	r2, #8
 800270e:	4013      	ands	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002722:	430a      	orrs	r2, r1
 8002724:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	4013      	ands	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002730:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002734:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002740:	430a      	orrs	r2, r1
 8002742:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b006      	add	sp, #24
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	40021000 	.word	0x40021000
 8002754:	40007000 	.word	0x40007000
 8002758:	fffcffff 	.word	0xfffcffff
 800275c:	fff7ffff 	.word	0xfff7ffff
 8002760:	00001388 	.word	0x00001388
 8002764:	ffcfffff 	.word	0xffcfffff
 8002768:	efffffff 	.word	0xefffffff
 800276c:	fffff3ff 	.word	0xfffff3ff
 8002770:	ffffcfff 	.word	0xffffcfff
 8002774:	fff3ffff 	.word	0xfff3ffff

08002778 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002780:	230f      	movs	r3, #15
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e088      	b.n	80028a4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2221      	movs	r2, #33	@ 0x21
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7fe fd5b 	bl	8001264 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2221      	movs	r2, #33	@ 0x21
 80027b2:	2102      	movs	r1, #2
 80027b4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2210      	movs	r2, #16
 80027be:	4013      	ands	r3, r2
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d05f      	beq.n	8002884 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	22ca      	movs	r2, #202	@ 0xca
 80027ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2253      	movs	r2, #83	@ 0x53
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80027d4:	250f      	movs	r5, #15
 80027d6:	197c      	adds	r4, r7, r5
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fb86 	bl	8002eec <RTC_EnterInitMode>
 80027e0:	0003      	movs	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80027e4:	0028      	movs	r0, r5
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12c      	bne.n	8002848 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	492c      	ldr	r1, [pc, #176]	@ (80028ac <HAL_RTC_Init+0x134>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68d2      	ldr	r2, [r2, #12]
 8002824:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800283a:	183c      	adds	r4, r7, r0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fb98 	bl	8002f74 <RTC_ExitInitMode>
 8002844:	0003      	movs	r3, r0
 8002846:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d113      	bne.n	800287a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2103      	movs	r1, #3
 800285e:	438a      	bics	r2, r1
 8002860:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	22ff      	movs	r2, #255	@ 0xff
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24
 8002882:	e003      	b.n	800288c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002884:	230f      	movs	r3, #15
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800288c:	230f      	movs	r3, #15
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2221      	movs	r2, #33	@ 0x21
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800289e:	230f      	movs	r3, #15
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b004      	add	sp, #16
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	ff8fffbf 	.word	0xff8fffbf

080028b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_RTC_SetTime+0x1e>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e092      	b.n	80029f4 <HAL_RTC_SetTime+0x144>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2221      	movs	r2, #33	@ 0x21
 80028da:	2102      	movs	r1, #2
 80028dc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d125      	bne.n	8002930 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2240      	movs	r2, #64	@ 0x40
 80028ec:	4013      	ands	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fb64 	bl	8002fc8 <RTC_ByteToBcd2>
 8002900:	0003      	movs	r3, r0
 8002902:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	0018      	movs	r0, r3
 800290a:	f000 fb5d 	bl	8002fc8 <RTC_ByteToBcd2>
 800290e:	0003      	movs	r3, r0
 8002910:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002912:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	789b      	ldrb	r3, [r3, #2]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 fb55 	bl	8002fc8 <RTC_ByteToBcd2>
 800291e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002920:	0022      	movs	r2, r4
 8002922:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	78db      	ldrb	r3, [r3, #3]
 8002928:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e017      	b.n	8002960 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2240      	movs	r2, #64	@ 0x40
 8002938:	4013      	ands	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2200      	movs	r2, #0
 8002940:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800294e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002954:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	78db      	ldrb	r3, [r3, #3]
 800295a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	22ca      	movs	r2, #202	@ 0xca
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2253      	movs	r2, #83	@ 0x53
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002970:	2513      	movs	r5, #19
 8002972:	197c      	adds	r4, r7, r5
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fab8 	bl	8002eec <RTC_EnterInitMode>
 800297c:	0003      	movs	r3, r0
 800297e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002980:	0028      	movs	r0, r5
 8002982:	183b      	adds	r3, r7, r0
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d120      	bne.n	80029cc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	491a      	ldr	r1, [pc, #104]	@ (80029fc <HAL_RTC_SetTime+0x14c>)
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4917      	ldr	r1, [pc, #92]	@ (8002a00 <HAL_RTC_SetTime+0x150>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029be:	183c      	adds	r4, r7, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fad6 	bl	8002f74 <RTC_ExitInitMode>
 80029c8:	0003      	movs	r3, r0
 80029ca:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80029cc:	2313      	movs	r3, #19
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2221      	movs	r2, #33	@ 0x21
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	22ff      	movs	r2, #255	@ 0xff
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

  return status;
 80029ee:	2313      	movs	r3, #19
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
}
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b006      	add	sp, #24
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}
 80029fc:	007f7f7f 	.word	0x007f7f7f
 8002a00:	fffbffff 	.word	0xfffbffff

08002a04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_RTC_SetDate+0x1e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e07e      	b.n	8002b20 <HAL_RTC_SetDate+0x11c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2221      	movs	r2, #33	@ 0x21
 8002a2e:	2102      	movs	r1, #2
 8002a30:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10e      	bne.n	8002a56 <HAL_RTC_SetDate+0x52>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2310      	movs	r3, #16
 8002a40:	4013      	ands	r3, r2
 8002a42:	d008      	beq.n	8002a56 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	330a      	adds	r3, #10
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11c      	bne.n	8002a96 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	78db      	ldrb	r3, [r3, #3]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fab1 	bl	8002fc8 <RTC_ByteToBcd2>
 8002a66:	0003      	movs	r3, r0
 8002a68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 faaa 	bl	8002fc8 <RTC_ByteToBcd2>
 8002a74:	0003      	movs	r3, r0
 8002a76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 faa2 	bl	8002fc8 <RTC_ByteToBcd2>
 8002a84:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a86:	0022      	movs	r2, r4
 8002a88:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e00e      	b.n	8002ab4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002aa2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002aa8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	22ca      	movs	r2, #202	@ 0xca
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2253      	movs	r2, #83	@ 0x53
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ac4:	2513      	movs	r5, #19
 8002ac6:	197c      	adds	r4, r7, r5
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 fa0e 	bl	8002eec <RTC_EnterInitMode>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002ad4:	0028      	movs	r0, r5
 8002ad6:	183b      	adds	r3, r7, r0
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4910      	ldr	r1, [pc, #64]	@ (8002b28 <HAL_RTC_SetDate+0x124>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002aea:	183c      	adds	r4, r7, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 fa40 	bl	8002f74 <RTC_ExitInitMode>
 8002af4:	0003      	movs	r3, r0
 8002af6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002af8:	2313      	movs	r3, #19
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2221      	movs	r2, #33	@ 0x21
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ff      	movs	r2, #255	@ 0xff
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]

  return status;
 8002b1a:	2313      	movs	r3, #19
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b006      	add	sp, #24
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}
 8002b28:	00ffff3f 	.word	0x00ffff3f

08002b2c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b089      	sub	sp, #36	@ 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002b38:	4ba7      	ldr	r3, [pc, #668]	@ (8002dd8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	22fa      	movs	r2, #250	@ 0xfa
 8002b3e:	01d1      	lsls	r1, r2, #7
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fd fae1 	bl	8000108 <__udivsi3>
 8002b46:	0003      	movs	r3, r0
 8002b48:	001a      	movs	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	015b      	lsls	r3, r3, #5
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_RTC_SetAlarm_IT+0x42>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e130      	b.n	8002dd0 <HAL_RTC_SetAlarm_IT+0x2a4>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2221      	movs	r2, #33	@ 0x21
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d136      	bne.n	8002bf2 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2240      	movs	r2, #64	@ 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fa14 	bl	8002fc8 <RTC_ByteToBcd2>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa0d 	bl	8002fc8 <RTC_ByteToBcd2>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002bb2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fa05 	bl	8002fc8 <RTC_ByteToBcd2>
 8002bbe:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	78db      	ldrb	r3, [r3, #3]
 8002bc8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	5c9b      	ldrb	r3, [r3, r2]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 f9f7 	bl	8002fc8 <RTC_ByteToBcd2>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002bde:	0022      	movs	r2, r4
 8002be0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002be6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e022      	b.n	8002c38 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2240      	movs	r2, #64	@ 0x40
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d102      	bne.n	8002c04 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c10:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002c16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	78db      	ldrb	r3, [r3, #3]
 8002c1c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002c1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2120      	movs	r1, #32
 8002c24:	5c5b      	ldrb	r3, [r3, r1]
 8002c26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002c2e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	22ca      	movs	r2, #202	@ 0xca
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2253      	movs	r2, #83	@ 0x53
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d146      	bne.n	8002cee <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	495c      	ldr	r1, [pc, #368]	@ (8002ddc <HAL_RTC_SetAlarm_IT+0x2b0>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	22ff      	movs	r2, #255	@ 0xff
 8002c78:	401a      	ands	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4958      	ldr	r1, [pc, #352]	@ (8002de0 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10d      	bne.n	8002cac <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	22ff      	movs	r2, #255	@ 0xff
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	@ 0x21
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e091      	b.n	8002dd0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d0e5      	beq.n	8002c84 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2180      	movs	r1, #128	@ 0x80
 8002cd4:	0049      	lsls	r1, r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	0149      	lsls	r1, r1, #5
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e055      	b.n	8002d9a <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	493a      	ldr	r1, [pc, #232]	@ (8002de4 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	22ff      	movs	r2, #255	@ 0xff
 8002d06:	401a      	ands	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4936      	ldr	r1, [pc, #216]	@ (8002de8 <HAL_RTC_SetAlarm_IT+0x2bc>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002d12:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22fa      	movs	r2, #250	@ 0xfa
 8002d18:	01d1      	lsls	r1, r2, #7
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7fd f9f4 	bl	8000108 <__udivsi3>
 8002d20:	0003      	movs	r3, r0
 8002d22:	001a      	movs	r2, r3
 8002d24:	0013      	movs	r3, r2
 8002d26:	015b      	lsls	r3, r3, #5
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	189b      	adds	r3, r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	22ff      	movs	r2, #255	@ 0xff
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2221      	movs	r2, #33	@ 0x21
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e03a      	b.n	8002dd0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d0e5      	beq.n	8002d32 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2180      	movs	r1, #128	@ 0x80
 8002d82:	0089      	lsls	r1, r1, #2
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	0189      	lsls	r1, r1, #6
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d9a:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002da0:	2180      	movs	r1, #128	@ 0x80
 8002da2:	0289      	lsls	r1, r1, #10
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002da8:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	0289      	lsls	r1, r1, #10
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	22ff      	movs	r2, #255	@ 0xff
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2221      	movs	r2, #33	@ 0x21
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b009      	add	sp, #36	@ 0x24
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	fffffeff 	.word	0xfffffeff
 8002de0:	fffffe7f 	.word	0xfffffe7f
 8002de4:	fffffdff 	.word	0xfffffdff
 8002de8:	fffffd7f 	.word	0xfffffd7f
 8002dec:	40010400 	.word	0x40010400

08002df0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002df8:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <HAL_RTC_AlarmIRQHandler+0x90>)
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	0292      	lsls	r2, r2, #10
 8002dfe:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d014      	beq.n	8002e38 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00d      	beq.n	8002e38 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	22ff      	movs	r2, #255	@ 0xff
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4916      	ldr	r1, [pc, #88]	@ (8002e84 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f82a 	bl	8002e8c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	019b      	lsls	r3, r3, #6
 8002e42:	4013      	ands	r3, r2
 8002e44:	d014      	beq.n	8002e70 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	22ff      	movs	r2, #255	@ 0xff
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4909      	ldr	r1, [pc, #36]	@ (8002e88 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f9de 	bl	800322c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2221      	movs	r2, #33	@ 0x21
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]
}
 8002e78:	46c0      	nop			@ (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40010400 	.word	0x40010400
 8002e84:	fffffe7f 	.word	0xfffffe7f
 8002e88:	fffffd7f 	.word	0xfffffd7f

08002e8c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <HAL_RTC_WaitForSynchro+0x4c>)
 8002eae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb0:	f7fe fb0a 	bl	80014c8 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eba:	f7fe fb05 	bl	80014c8 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	23fa      	movs	r3, #250	@ 0xfa
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d901      	bls.n	8002ed0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e006      	b.n	8002ede <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d0ee      	beq.n	8002eba <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	0001ff5f 	.word	0x0001ff5f

08002eec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	230f      	movs	r3, #15
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2240      	movs	r2, #64	@ 0x40
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d12c      	bne.n	8002f66 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2180      	movs	r1, #128	@ 0x80
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fad4 	bl	80014c8 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f24:	e014      	b.n	8002f50 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f26:	f7fe facf 	bl	80014c8 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	200f      	movs	r0, #15
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	1839      	adds	r1, r7, r0
 8002f36:	7809      	ldrb	r1, [r1, #0]
 8002f38:	7019      	strb	r1, [r3, #0]
 8002f3a:	23fa      	movs	r3, #250	@ 0xfa
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d906      	bls.n	8002f50 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2221      	movs	r2, #33	@ 0x21
 8002f46:	2104      	movs	r1, #4
 8002f48:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002f4a:	183b      	adds	r3, r7, r0
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d104      	bne.n	8002f66 <RTC_EnterInitMode+0x7a>
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d1df      	bne.n	8002f26 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002f66:	230f      	movs	r3, #15
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	240f      	movs	r4, #15
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2180      	movs	r1, #128	@ 0x80
 8002f90:	438a      	bics	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d10c      	bne.n	8002fba <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff ff7a 	bl	8002e9c <HAL_RTC_WaitForSynchro>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d006      	beq.n	8002fba <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2221      	movs	r2, #33	@ 0x21
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002fba:	230f      	movs	r3, #15
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	781b      	ldrb	r3, [r3, #0]
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b005      	add	sp, #20
 8002fc6:	bd90      	pop	{r4, r7, pc}

08002fc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	0002      	movs	r2, r0
 8002fd0:	1dfb      	adds	r3, r7, #7
 8002fd2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002fd8:	e007      	b.n	8002fea <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	1dfa      	adds	r2, r7, #7
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	3a0a      	subs	r2, #10
 8002fe8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b09      	cmp	r3, #9
 8002ff0:	d8f3      	bhi.n	8002fda <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b2db      	uxtb	r3, r3
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003018:	4b64      	ldr	r3, [pc, #400]	@ (80031ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	22fa      	movs	r2, #250	@ 0xfa
 800301e:	01d1      	lsls	r1, r2, #7
 8003020:	0018      	movs	r0, r3
 8003022:	f7fd f871 	bl	8000108 <__udivsi3>
 8003026:	0003      	movs	r3, r0
 8003028:	001a      	movs	r2, r3
 800302a:	0013      	movs	r3, r2
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	189b      	adds	r3, r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	5c9b      	ldrb	r3, [r3, r2]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8003042:	2302      	movs	r3, #2
 8003044:	e0ad      	b.n	80031a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2221      	movs	r2, #33	@ 0x21
 8003052:	2102      	movs	r1, #2
 8003054:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	22ca      	movs	r2, #202	@ 0xca
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2253      	movs	r2, #83	@ 0x53
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4013      	ands	r3, r2
 8003072:	d019      	beq.n	80030a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3b01      	subs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	22ff      	movs	r2, #255	@ 0xff
 8003086:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2221      	movs	r2, #33	@ 0x21
 800308c:	2103      	movs	r1, #3
 800308e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	2100      	movs	r1, #0
 8003096:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e082      	b.n	80031a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2204      	movs	r2, #4
 80030a4:	4013      	ands	r3, r2
 80030a6:	d1e5      	bne.n	8003074 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	493f      	ldr	r1, [pc, #252]	@ (80031b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	22ff      	movs	r2, #255	@ 0xff
 80030c0:	401a      	ands	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	493b      	ldr	r1, [pc, #236]	@ (80031b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80030cc:	4b37      	ldr	r3, [pc, #220]	@ (80031ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	22fa      	movs	r2, #250	@ 0xfa
 80030d2:	01d1      	lsls	r1, r2, #7
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fd f817 	bl	8000108 <__udivsi3>
 80030da:	0003      	movs	r3, r0
 80030dc:	001a      	movs	r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	22ff      	movs	r2, #255	@ 0xff
 80030fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2221      	movs	r2, #33	@ 0x21
 8003104:	2103      	movs	r1, #3
 8003106:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e046      	b.n	80031a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2204      	movs	r2, #4
 800311c:	4013      	ands	r3, r2
 800311e:	d0e5      	beq.n	80030ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2107      	movs	r1, #7
 800312c:	438a      	bics	r2, r1
 800312e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800314e:	2180      	movs	r1, #128	@ 0x80
 8003150:	0349      	lsls	r1, r1, #13
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003156:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	0349      	lsls	r1, r1, #13
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2180      	movs	r1, #128	@ 0x80
 8003170:	01c9      	lsls	r1, r1, #7
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	00c9      	lsls	r1, r1, #3
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	22ff      	movs	r2, #255	@ 0xff
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2221      	movs	r2, #33	@ 0x21
 8003194:	2101      	movs	r1, #1
 8003196:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	2100      	movs	r1, #0
 800319e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	0018      	movs	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b006      	add	sp, #24
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	20000004 	.word	0x20000004
 80031b0:	fffffbff 	.word	0xfffffbff
 80031b4:	fffffb7f 	.word	0xfffffb7f
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80031c4:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80031c6:	2280      	movs	r2, #128	@ 0x80
 80031c8:	0352      	lsls	r2, r2, #13
 80031ca:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	2380      	movs	r3, #128	@ 0x80
 80031d4:	01db      	lsls	r3, r3, #7
 80031d6:	4013      	ands	r3, r2
 80031d8:	d014      	beq.n	8003204 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4013      	ands	r3, r2
 80031e6:	d00d      	beq.n	8003204 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	22ff      	movs	r2, #255	@ 0xff
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4908      	ldr	r1, [pc, #32]	@ (8003218 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f80c 	bl	800321c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2221      	movs	r2, #33	@ 0x21
 8003208:	2101      	movs	r1, #1
 800320a:	5499      	strb	r1, [r3, r2]
}
 800320c:	46c0      	nop			@ (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40010400 	.word	0x40010400
 8003218:	fffffb7f 	.word	0xfffffb7f

0800321c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e032      	b.n	80032b4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2239      	movs	r2, #57	@ 0x39
 8003252:	5c9b      	ldrb	r3, [r3, r2]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2238      	movs	r2, #56	@ 0x38
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f7fe f81d 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2239      	movs	r2, #57	@ 0x39
 800326e:	2102      	movs	r1, #2
 8003270:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	0019      	movs	r1, r3
 800327c:	0010      	movs	r0, r2
 800327e:	f000 fac9 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223e      	movs	r2, #62	@ 0x3e
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223a      	movs	r2, #58	@ 0x3a
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	223b      	movs	r2, #59	@ 0x3b
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	223c      	movs	r2, #60	@ 0x3c
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	223d      	movs	r2, #61	@ 0x3d
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2239      	movs	r2, #57	@ 0x39
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e032      	b.n	8003334 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2239      	movs	r2, #57	@ 0x39
 80032d2:	5c9b      	ldrb	r3, [r3, r2]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2238      	movs	r2, #56	@ 0x38
 80032de:	2100      	movs	r1, #0
 80032e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 f829 	bl	800333c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2239      	movs	r2, #57	@ 0x39
 80032ee:	2102      	movs	r1, #2
 80032f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f000 fa89 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223e      	movs	r2, #62	@ 0x3e
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	223a      	movs	r2, #58	@ 0x3a
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223b      	movs	r2, #59	@ 0x3b
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223c      	movs	r2, #60	@ 0x3c
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	223d      	movs	r2, #61	@ 0x3d
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2239      	movs	r2, #57	@ 0x39
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <HAL_TIM_PWM_Start+0x22>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223a      	movs	r2, #58	@ 0x3a
 8003360:	5c9b      	ldrb	r3, [r3, r2]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	4193      	sbcs	r3, r2
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e01f      	b.n	80033ae <HAL_TIM_PWM_Start+0x62>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d108      	bne.n	8003386 <HAL_TIM_PWM_Start+0x3a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223b      	movs	r2, #59	@ 0x3b
 8003378:	5c9b      	ldrb	r3, [r3, r2]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	4193      	sbcs	r3, r2
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e013      	b.n	80033ae <HAL_TIM_PWM_Start+0x62>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d108      	bne.n	800339e <HAL_TIM_PWM_Start+0x52>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	223c      	movs	r2, #60	@ 0x3c
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	4193      	sbcs	r3, r2
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e007      	b.n	80033ae <HAL_TIM_PWM_Start+0x62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	223d      	movs	r2, #61	@ 0x3d
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	4193      	sbcs	r3, r2
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e04d      	b.n	8003452 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x7a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223a      	movs	r2, #58	@ 0x3a
 80033c0:	2102      	movs	r1, #2
 80033c2:	5499      	strb	r1, [r3, r2]
 80033c4:	e013      	b.n	80033ee <HAL_TIM_PWM_Start+0xa2>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x8a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	223b      	movs	r2, #59	@ 0x3b
 80033d0:	2102      	movs	r1, #2
 80033d2:	5499      	strb	r1, [r3, r2]
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_PWM_Start+0xa2>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x9a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	223c      	movs	r2, #60	@ 0x3c
 80033e0:	2102      	movs	r1, #2
 80033e2:	5499      	strb	r1, [r3, r2]
 80033e4:	e003      	b.n	80033ee <HAL_TIM_PWM_Start+0xa2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223d      	movs	r2, #61	@ 0x3d
 80033ea:	2102      	movs	r1, #2
 80033ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	2201      	movs	r2, #1
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fbfe 	bl	8003bf8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	05db      	lsls	r3, r3, #23
 8003404:	429a      	cmp	r2, r3
 8003406:	d009      	beq.n	800341c <HAL_TIM_PWM_Start+0xd0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a13      	ldr	r2, [pc, #76]	@ (800345c <HAL_TIM_PWM_Start+0x110>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_TIM_PWM_Start+0xd0>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a12      	ldr	r2, [pc, #72]	@ (8003460 <HAL_TIM_PWM_Start+0x114>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d111      	bne.n	8003440 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2207      	movs	r2, #7
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d010      	beq.n	8003450 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	e007      	b.n	8003450 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	40010800 	.word	0x40010800
 8003460:	40011400 	.word	0x40011400

08003464 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fbbe 	bl	8003bf8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4a16      	ldr	r2, [pc, #88]	@ (80034dc <HAL_TIM_PWM_Stop+0x78>)
 8003484:	4013      	ands	r3, r2
 8003486:	d107      	bne.n	8003498 <HAL_TIM_PWM_Stop+0x34>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2101      	movs	r1, #1
 8003494:	438a      	bics	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_TIM_PWM_Stop+0x44>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223a      	movs	r2, #58	@ 0x3a
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
 80034a6:	e013      	b.n	80034d0 <HAL_TIM_PWM_Stop+0x6c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d104      	bne.n	80034b8 <HAL_TIM_PWM_Stop+0x54>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	223b      	movs	r2, #59	@ 0x3b
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	e00b      	b.n	80034d0 <HAL_TIM_PWM_Stop+0x6c>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d104      	bne.n	80034c8 <HAL_TIM_PWM_Stop+0x64>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	223c      	movs	r2, #60	@ 0x3c
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	e003      	b.n	80034d0 <HAL_TIM_PWM_Stop+0x6c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	223d      	movs	r2, #61	@ 0x3d
 80034cc:	2101      	movs	r1, #1
 80034ce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b002      	add	sp, #8
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	00001111 	.word	0x00001111

080034e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2317      	movs	r3, #23
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2238      	movs	r2, #56	@ 0x38
 80034f8:	5c9b      	ldrb	r3, [r3, r2]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x22>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0ad      	b.n	800365e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2238      	movs	r2, #56	@ 0x38
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d100      	bne.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003510:	e076      	b.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d900      	bls.n	800351a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003518:	e095      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x166>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d04e      	beq.n	80035be <HAL_TIM_PWM_ConfigChannel+0xde>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d900      	bls.n	8003528 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003526:	e08e      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x56>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d021      	beq.n	8003578 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003534:	e087      	b.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f000 f9bc 	bl	80038bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2108      	movs	r1, #8
 8003550:	430a      	orrs	r2, r1
 8003552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2104      	movs	r1, #4
 8003560:	438a      	bics	r2, r1
 8003562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	619a      	str	r2, [r3, #24]
      break;
 8003576:	e06b      	b.n	8003650 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	0011      	movs	r1, r2
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f9d7 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2180      	movs	r1, #128	@ 0x80
 8003592:	0109      	lsls	r1, r1, #4
 8003594:	430a      	orrs	r2, r1
 8003596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4931      	ldr	r1, [pc, #196]	@ (8003668 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6999      	ldr	r1, [r3, #24]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	021a      	lsls	r2, r3, #8
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	619a      	str	r2, [r3, #24]
      break;
 80035bc:	e048      	b.n	8003650 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	0011      	movs	r1, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f9f6 	bl	80039b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2108      	movs	r1, #8
 80035d8:	430a      	orrs	r2, r1
 80035da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2104      	movs	r1, #4
 80035e8:	438a      	bics	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69d9      	ldr	r1, [r3, #28]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	61da      	str	r2, [r3, #28]
      break;
 80035fe:	e027      	b.n	8003650 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f000 fa15 	bl	8003a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2180      	movs	r1, #128	@ 0x80
 800361a:	0109      	lsls	r1, r1, #4
 800361c:	430a      	orrs	r2, r1
 800361e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	490f      	ldr	r1, [pc, #60]	@ (8003668 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800362c:	400a      	ands	r2, r1
 800362e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69d9      	ldr	r1, [r3, #28]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
      break;
 8003644:	e004      	b.n	8003650 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003646:	2317      	movs	r3, #23
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
      break;
 800364e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2238      	movs	r2, #56	@ 0x38
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]

  return status;
 8003658:	2317      	movs	r3, #23
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	781b      	ldrb	r3, [r3, #0]
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b006      	add	sp, #24
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	fffffbff 	.word	0xfffffbff

0800366c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	230f      	movs	r3, #15
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2238      	movs	r2, #56	@ 0x38
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIM_ConfigClockSource+0x20>
 8003688:	2302      	movs	r3, #2
 800368a:	e0bc      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x19a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2238      	movs	r2, #56	@ 0x38
 8003690:	2101      	movs	r1, #1
 8003692:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2239      	movs	r2, #57	@ 0x39
 8003698:	2102      	movs	r1, #2
 800369a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2277      	movs	r2, #119	@ 0x77
 80036a8:	4393      	bics	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_TIM_ConfigClockSource+0x1a4>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2280      	movs	r2, #128	@ 0x80
 80036c2:	0192      	lsls	r2, r2, #6
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xde>
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	0192      	lsls	r2, r2, #6
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d900      	bls.n	80036d2 <HAL_TIM_ConfigClockSource+0x66>
 80036d0:	e088      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 80036d2:	2280      	movs	r2, #128	@ 0x80
 80036d4:	0152      	lsls	r2, r2, #5
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d100      	bne.n	80036dc <HAL_TIM_ConfigClockSource+0x70>
 80036da:	e088      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x182>
 80036dc:	2280      	movs	r2, #128	@ 0x80
 80036de:	0152      	lsls	r2, r2, #5
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d900      	bls.n	80036e6 <HAL_TIM_ConfigClockSource+0x7a>
 80036e4:	e07e      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 80036e6:	2b70      	cmp	r3, #112	@ 0x70
 80036e8:	d018      	beq.n	800371c <HAL_TIM_ConfigClockSource+0xb0>
 80036ea:	d900      	bls.n	80036ee <HAL_TIM_ConfigClockSource+0x82>
 80036ec:	e07a      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 80036ee:	2b60      	cmp	r3, #96	@ 0x60
 80036f0:	d04f      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x126>
 80036f2:	d900      	bls.n	80036f6 <HAL_TIM_ConfigClockSource+0x8a>
 80036f4:	e076      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 80036f6:	2b50      	cmp	r3, #80	@ 0x50
 80036f8:	d03b      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x106>
 80036fa:	d900      	bls.n	80036fe <HAL_TIM_ConfigClockSource+0x92>
 80036fc:	e072      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 80036fe:	2b40      	cmp	r3, #64	@ 0x40
 8003700:	d057      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x146>
 8003702:	d900      	bls.n	8003706 <HAL_TIM_ConfigClockSource+0x9a>
 8003704:	e06e      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 8003706:	2b30      	cmp	r3, #48	@ 0x30
 8003708:	d063      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x166>
 800370a:	d86b      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d060      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x166>
 8003710:	d868      	bhi.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d05d      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x166>
 8003716:	2b10      	cmp	r3, #16
 8003718:	d05b      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x166>
 800371a:	e063      	b.n	80037e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800372c:	f000 fa44 	bl	8003bb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2277      	movs	r2, #119	@ 0x77
 800373c:	4313      	orrs	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]
      break;
 8003748:	e052      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800375a:	f000 fa2d 	bl	8003bb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2180      	movs	r1, #128	@ 0x80
 800376a:	01c9      	lsls	r1, r1, #7
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]
      break;
 8003770:	e03e      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377e:	001a      	movs	r2, r3
 8003780:	f000 f9a0 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2150      	movs	r1, #80	@ 0x50
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f9fa 	bl	8003b84 <TIM_ITRx_SetConfig>
      break;
 8003790:	e02e      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379e:	001a      	movs	r2, r3
 80037a0:	f000 f9be 	bl	8003b20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2160      	movs	r1, #96	@ 0x60
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f9ea 	bl	8003b84 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e01e      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	001a      	movs	r2, r3
 80037c0:	f000 f980 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2140      	movs	r1, #64	@ 0x40
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f9da 	bl	8003b84 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e00e      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0019      	movs	r1, r3
 80037dc:	0010      	movs	r0, r2
 80037de:	f000 f9d1 	bl	8003b84 <TIM_ITRx_SetConfig>
      break;
 80037e2:	e005      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80037e4:	230f      	movs	r3, #15
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
      break;
 80037ec:	e000      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80037ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2239      	movs	r2, #57	@ 0x39
 80037f4:	2101      	movs	r1, #1
 80037f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2238      	movs	r2, #56	@ 0x38
 80037fc:	2100      	movs	r1, #0
 80037fe:	5499      	strb	r1, [r3, r2]

  return status;
 8003800:	230f      	movs	r3, #15
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	781b      	ldrb	r3, [r3, #0]
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	ffff00ff 	.word	0xffff00ff

08003814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	05db      	lsls	r3, r3, #23
 800382a:	429a      	cmp	r2, r3
 800382c:	d007      	beq.n	800383e <TIM_Base_SetConfig+0x2a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1f      	ldr	r2, [pc, #124]	@ (80038b0 <TIM_Base_SetConfig+0x9c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_Base_SetConfig+0x2a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1e      	ldr	r2, [pc, #120]	@ (80038b4 <TIM_Base_SetConfig+0xa0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d108      	bne.n	8003850 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2270      	movs	r2, #112	@ 0x70
 8003842:	4393      	bics	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	429a      	cmp	r2, r3
 8003858:	d007      	beq.n	800386a <TIM_Base_SetConfig+0x56>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <TIM_Base_SetConfig+0x9c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_Base_SetConfig+0x56>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a13      	ldr	r2, [pc, #76]	@ (80038b4 <TIM_Base_SetConfig+0xa0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a12      	ldr	r2, [pc, #72]	@ (80038b8 <TIM_Base_SetConfig+0xa4>)
 800386e:	4013      	ands	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	4393      	bics	r3, r2
 8003882:	001a      	movs	r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	615a      	str	r2, [r3, #20]
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40010800 	.word	0x40010800
 80038b4:	40011400 	.word	0x40011400
 80038b8:	fffffcff 	.word	0xfffffcff

080038bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4393      	bics	r3, r2
 80038ce:	001a      	movs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2270      	movs	r2, #112	@ 0x70
 80038ea:	4393      	bics	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2203      	movs	r2, #3
 80038f2:	4393      	bics	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2202      	movs	r2, #2
 8003904:	4393      	bics	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b006      	add	sp, #24
 8003932:	bd80      	pop	{r7, pc}

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2210      	movs	r2, #16
 8003944:	4393      	bics	r3, r2
 8003946:	001a      	movs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <TIM_OC2_SetConfig+0x7c>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <TIM_OC2_SetConfig+0x80>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2220      	movs	r2, #32
 800397e:	4393      	bics	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b006      	add	sp, #24
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	ffff8fff 	.word	0xffff8fff
 80039b4:	fffffcff 	.word	0xfffffcff

080039b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <TIM_OC3_SetConfig+0x78>)
 80039c8:	401a      	ands	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2270      	movs	r2, #112	@ 0x70
 80039e4:	4393      	bics	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2203      	movs	r2, #3
 80039ec:	4393      	bics	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a34 <TIM_OC3_SetConfig+0x7c>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fffffeff 	.word	0xfffffeff
 8003a34:	fffffdff 	.word	0xfffffdff

08003a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <TIM_OC4_SetConfig+0x7c>)
 8003a48:	401a      	ands	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <TIM_OC4_SetConfig+0x80>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <TIM_OC4_SetConfig+0x84>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <TIM_OC4_SetConfig+0x88>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	031b      	lsls	r3, r3, #12
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b006      	add	sp, #24
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	ffffefff 	.word	0xffffefff
 8003ab8:	ffff8fff 	.word	0xffff8fff
 8003abc:	fffffcff 	.word	0xfffffcff
 8003ac0:	ffffdfff 	.word	0xffffdfff

08003ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4393      	bics	r3, r2
 8003ade:	001a      	movs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	22f0      	movs	r2, #240	@ 0xf0
 8003aee:	4393      	bics	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	220a      	movs	r2, #10
 8003b00:	4393      	bics	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b006      	add	sp, #24
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	2210      	movs	r2, #16
 8003b32:	4393      	bics	r3, r2
 8003b34:	001a      	movs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4a0d      	ldr	r2, [pc, #52]	@ (8003b80 <TIM_TI2_ConfigInputStage+0x60>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	22a0      	movs	r2, #160	@ 0xa0
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b006      	add	sp, #24
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	ffff0fff 	.word	0xffff0fff

08003b84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2270      	movs	r2, #112	@ 0x70
 8003b98:	4393      	bics	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	609a      	str	r2, [r3, #8]
}
 8003bae:	46c0      	nop			@ (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b004      	add	sp, #16
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <TIM_ETR_SetConfig+0x3c>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b006      	add	sp, #24
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	ffff00ff 	.word	0xffff00ff

08003bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	221f      	movs	r2, #31
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	0013      	movs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	43d2      	mvns	r2, r2
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	211f      	movs	r1, #31
 8003c28:	400b      	ands	r3, r1
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4099      	lsls	r1, r3
 8003c2e:	000b      	movs	r3, r1
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b006      	add	sp, #24
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2238      	movs	r2, #56	@ 0x38
 8003c4e:	5c9b      	ldrb	r3, [r3, r2]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e042      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2238      	movs	r2, #56	@ 0x38
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2239      	movs	r2, #57	@ 0x39
 8003c64:	2102      	movs	r1, #2
 8003c66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2270      	movs	r2, #112	@ 0x70
 8003c7c:	4393      	bics	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	05db      	lsls	r3, r3, #23
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a11      	ldr	r2, [pc, #68]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0f      	ldr	r2, [pc, #60]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	4393      	bics	r3, r2
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2239      	movs	r2, #57	@ 0x39
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2238      	movs	r2, #56	@ 0x38
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40011400 	.word	0x40011400

08003cf0 <memset>:
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	1882      	adds	r2, r0, r2
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <memset+0xa>
 8003cf8:	4770      	bx	lr
 8003cfa:	7019      	strb	r1, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	e7f9      	b.n	8003cf4 <memset+0x4>

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	2600      	movs	r6, #0
 8003d04:	4c0c      	ldr	r4, [pc, #48]	@ (8003d38 <__libc_init_array+0x38>)
 8003d06:	4d0d      	ldr	r5, [pc, #52]	@ (8003d3c <__libc_init_array+0x3c>)
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	2600      	movs	r6, #0
 8003d12:	f000 f819 	bl	8003d48 <_init>
 8003d16:	4c0a      	ldr	r4, [pc, #40]	@ (8003d40 <__libc_init_array+0x40>)
 8003d18:	4d0a      	ldr	r5, [pc, #40]	@ (8003d44 <__libc_init_array+0x44>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	00b3      	lsls	r3, r6, #2
 8003d26:	58eb      	ldr	r3, [r5, r3]
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	00b3      	lsls	r3, r6, #2
 8003d30:	58eb      	ldr	r3, [r5, r3]
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003d84 	.word	0x08003d84
 8003d3c:	08003d84 	.word	0x08003d84
 8003d40:	08003d88 	.word	0x08003d88
 8003d44:	08003d84 	.word	0x08003d84

08003d48 <_init>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr

08003d54 <_fini>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr
