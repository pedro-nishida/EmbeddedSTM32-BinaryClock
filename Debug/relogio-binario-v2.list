
relogio-binario-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003774  08003774  00004774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003790  08003790  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003790  08003790  00004790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003798  08003798  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800379c  0800379c  0000479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080037a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000010  080037b0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080037b0  000050a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009851  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  0000e889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000104f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000897  00000000  00000000  00011040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116e9  00000000  00000000  000118d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c85e  00000000  00000000  00022fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cf78  00000000  00000000  0002f81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002828  00000000  00000000  0009c7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0009f004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800375c 	.word	0x0800375c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800375c 	.word	0x0800375c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f834 	bl	8000490 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1824      	adds	r4, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	42a3      	cmp	r3, r4
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c23      	lsrs	r3, r4, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0424      	lsls	r4, r4, #16
 8000482:	1960      	adds	r0, r4, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__udivmoddi4>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	4657      	mov	r7, sl
 8000494:	464e      	mov	r6, r9
 8000496:	4645      	mov	r5, r8
 8000498:	46de      	mov	lr, fp
 800049a:	b5e0      	push	{r5, r6, r7, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	4692      	mov	sl, r2
 80004a2:	4699      	mov	r9, r3
 80004a4:	b083      	sub	sp, #12
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d830      	bhi.n	800050c <__udivmoddi4+0x7c>
 80004aa:	d02d      	beq.n	8000508 <__udivmoddi4+0x78>
 80004ac:	4649      	mov	r1, r9
 80004ae:	4650      	mov	r0, sl
 80004b0:	f000 f8ba 	bl	8000628 <__clzdi2>
 80004b4:	0029      	movs	r1, r5
 80004b6:	0006      	movs	r6, r0
 80004b8:	0020      	movs	r0, r4
 80004ba:	f000 f8b5 	bl	8000628 <__clzdi2>
 80004be:	1a33      	subs	r3, r6, r0
 80004c0:	4698      	mov	r8, r3
 80004c2:	3b20      	subs	r3, #32
 80004c4:	d434      	bmi.n	8000530 <__udivmoddi4+0xa0>
 80004c6:	469b      	mov	fp, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	465a      	mov	r2, fp
 80004cc:	4093      	lsls	r3, r2
 80004ce:	4642      	mov	r2, r8
 80004d0:	001f      	movs	r7, r3
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	001e      	movs	r6, r3
 80004d8:	42af      	cmp	r7, r5
 80004da:	d83b      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80004dc:	42af      	cmp	r7, r5
 80004de:	d100      	bne.n	80004e2 <__udivmoddi4+0x52>
 80004e0:	e079      	b.n	80005d6 <__udivmoddi4+0x146>
 80004e2:	465b      	mov	r3, fp
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	41bd      	sbcs	r5, r7
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da00      	bge.n	80004ee <__udivmoddi4+0x5e>
 80004ec:	e076      	b.n	80005dc <__udivmoddi4+0x14c>
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	9200      	str	r2, [sp, #0]
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	465a      	mov	r2, fp
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	4642      	mov	r2, r8
 8000502:	4093      	lsls	r3, r2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	e029      	b.n	800055c <__udivmoddi4+0xcc>
 8000508:	4282      	cmp	r2, r0
 800050a:	d9cf      	bls.n	80004ac <__udivmoddi4+0x1c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <__udivmoddi4+0x8e>
 800051a:	601c      	str	r4, [r3, #0]
 800051c:	605d      	str	r5, [r3, #4]
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	b003      	add	sp, #12
 8000524:	bcf0      	pop	{r4, r5, r6, r7}
 8000526:	46bb      	mov	fp, r7
 8000528:	46b2      	mov	sl, r6
 800052a:	46a9      	mov	r9, r5
 800052c:	46a0      	mov	r8, r4
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	4642      	mov	r2, r8
 8000532:	469b      	mov	fp, r3
 8000534:	2320      	movs	r3, #32
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	4652      	mov	r2, sl
 800053a:	40da      	lsrs	r2, r3
 800053c:	4641      	mov	r1, r8
 800053e:	0013      	movs	r3, r2
 8000540:	464a      	mov	r2, r9
 8000542:	408a      	lsls	r2, r1
 8000544:	0017      	movs	r7, r2
 8000546:	4642      	mov	r2, r8
 8000548:	431f      	orrs	r7, r3
 800054a:	4653      	mov	r3, sl
 800054c:	4093      	lsls	r3, r2
 800054e:	001e      	movs	r6, r3
 8000550:	42af      	cmp	r7, r5
 8000552:	d9c3      	bls.n	80004dc <__udivmoddi4+0x4c>
 8000554:	2200      	movs	r2, #0
 8000556:	2300      	movs	r3, #0
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4643      	mov	r3, r8
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0d8      	beq.n	8000514 <__udivmoddi4+0x84>
 8000562:	07fb      	lsls	r3, r7, #31
 8000564:	0872      	lsrs	r2, r6, #1
 8000566:	431a      	orrs	r2, r3
 8000568:	4646      	mov	r6, r8
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	e00e      	b.n	800058c <__udivmoddi4+0xfc>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d101      	bne.n	8000576 <__udivmoddi4+0xe6>
 8000572:	42a2      	cmp	r2, r4
 8000574:	d80c      	bhi.n	8000590 <__udivmoddi4+0x100>
 8000576:	1aa4      	subs	r4, r4, r2
 8000578:	419d      	sbcs	r5, r3
 800057a:	2001      	movs	r0, #1
 800057c:	1924      	adds	r4, r4, r4
 800057e:	416d      	adcs	r5, r5
 8000580:	2100      	movs	r1, #0
 8000582:	3e01      	subs	r6, #1
 8000584:	1824      	adds	r4, r4, r0
 8000586:	414d      	adcs	r5, r1
 8000588:	2e00      	cmp	r6, #0
 800058a:	d006      	beq.n	800059a <__udivmoddi4+0x10a>
 800058c:	42ab      	cmp	r3, r5
 800058e:	d9ee      	bls.n	800056e <__udivmoddi4+0xde>
 8000590:	3e01      	subs	r6, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1f8      	bne.n	800058c <__udivmoddi4+0xfc>
 800059a:	9800      	ldr	r0, [sp, #0]
 800059c:	9901      	ldr	r1, [sp, #4]
 800059e:	465b      	mov	r3, fp
 80005a0:	1900      	adds	r0, r0, r4
 80005a2:	4169      	adcs	r1, r5
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	db24      	blt.n	80005f2 <__udivmoddi4+0x162>
 80005a8:	002b      	movs	r3, r5
 80005aa:	465a      	mov	r2, fp
 80005ac:	4644      	mov	r4, r8
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	40e2      	lsrs	r2, r4
 80005b4:	001c      	movs	r4, r3
 80005b6:	465b      	mov	r3, fp
 80005b8:	0015      	movs	r5, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db2a      	blt.n	8000614 <__udivmoddi4+0x184>
 80005be:	0026      	movs	r6, r4
 80005c0:	409e      	lsls	r6, r3
 80005c2:	0033      	movs	r3, r6
 80005c4:	0026      	movs	r6, r4
 80005c6:	4647      	mov	r7, r8
 80005c8:	40be      	lsls	r6, r7
 80005ca:	0032      	movs	r2, r6
 80005cc:	1a80      	subs	r0, r0, r2
 80005ce:	4199      	sbcs	r1, r3
 80005d0:	9000      	str	r0, [sp, #0]
 80005d2:	9101      	str	r1, [sp, #4]
 80005d4:	e79e      	b.n	8000514 <__udivmoddi4+0x84>
 80005d6:	42a3      	cmp	r3, r4
 80005d8:	d8bc      	bhi.n	8000554 <__udivmoddi4+0xc4>
 80005da:	e782      	b.n	80004e2 <__udivmoddi4+0x52>
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	9100      	str	r1, [sp, #0]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	2201      	movs	r2, #1
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	e785      	b.n	80004fe <__udivmoddi4+0x6e>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	4646      	mov	r6, r8
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0023      	movs	r3, r4
 8000600:	40f3      	lsrs	r3, r6
 8000602:	4644      	mov	r4, r8
 8000604:	4313      	orrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	dad4      	bge.n	80005be <__udivmoddi4+0x12e>
 8000614:	4642      	mov	r2, r8
 8000616:	002f      	movs	r7, r5
 8000618:	2320      	movs	r3, #32
 800061a:	0026      	movs	r6, r4
 800061c:	4097      	lsls	r7, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	40de      	lsrs	r6, r3
 8000622:	003b      	movs	r3, r7
 8000624:	4333      	orrs	r3, r6
 8000626:	e7cd      	b.n	80005c4 <__udivmoddi4+0x134>

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f000 f807 	bl	8000640 <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f000 f802 	bl	8000640 <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)

08000640 <__clzsi2>:
 8000640:	211c      	movs	r1, #28
 8000642:	2301      	movs	r3, #1
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	4298      	cmp	r0, r3
 8000648:	d301      	bcc.n	800064e <__clzsi2+0xe>
 800064a:	0c00      	lsrs	r0, r0, #16
 800064c:	3910      	subs	r1, #16
 800064e:	0a1b      	lsrs	r3, r3, #8
 8000650:	4298      	cmp	r0, r3
 8000652:	d301      	bcc.n	8000658 <__clzsi2+0x18>
 8000654:	0a00      	lsrs	r0, r0, #8
 8000656:	3908      	subs	r1, #8
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0x22>
 800065e:	0900      	lsrs	r0, r0, #4
 8000660:	3904      	subs	r1, #4
 8000662:	a202      	add	r2, pc, #8	@ (adr r2, 800066c <__clzsi2+0x2c>)
 8000664:	5c10      	ldrb	r0, [r2, r0]
 8000666:	1840      	adds	r0, r0, r1
 8000668:	4770      	bx	lr
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	02020304 	.word	0x02020304
 8000670:	01010101 	.word	0x01010101
	...

0800067c <incrementSeconds_units>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void incrementSeconds_units() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    currentTime.seconds_units = (currentTime.seconds_units + 1) % 10;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <incrementSeconds_units+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	210a      	movs	r1, #10
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff fead 	bl	80003e8 <__aeabi_idivmod>
 800068e:	000b      	movs	r3, r1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b02      	ldr	r3, [pc, #8]	@ (800069c <incrementSeconds_units+0x20>)
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000090 	.word	0x20000090

080006a0 <incrementSeconds_tens>:

void incrementSeconds_tens() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    currentTime.seconds_tens = (currentTime.seconds_tens + 1) % 6;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <incrementSeconds_tens+0x20>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	3301      	adds	r3, #1
 80006aa:	2106      	movs	r1, #6
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff fe9b 	bl	80003e8 <__aeabi_idivmod>
 80006b2:	000b      	movs	r3, r1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b02      	ldr	r3, [pc, #8]	@ (80006c0 <incrementSeconds_tens+0x20>)
 80006b8:	705a      	strb	r2, [r3, #1]
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000090 	.word	0x20000090

080006c4 <incrementMinutes_units>:

void incrementMinutes_units() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    currentTime.minutes_units = (currentTime.minutes_units + 1) % 10;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <incrementMinutes_units+0x20>)
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	3301      	adds	r3, #1
 80006ce:	210a      	movs	r1, #10
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff fe89 	bl	80003e8 <__aeabi_idivmod>
 80006d6:	000b      	movs	r3, r1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b02      	ldr	r3, [pc, #8]	@ (80006e4 <incrementMinutes_units+0x20>)
 80006dc:	709a      	strb	r2, [r3, #2]
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000090 	.word	0x20000090

080006e8 <incrementMinutes_tens>:

void incrementMinutes_tens() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    currentTime.minutes_tens = (currentTime.minutes_tens + 1) % 6;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <incrementMinutes_tens+0x20>)
 80006ee:	78db      	ldrb	r3, [r3, #3]
 80006f0:	3301      	adds	r3, #1
 80006f2:	2106      	movs	r1, #6
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff fe77 	bl	80003e8 <__aeabi_idivmod>
 80006fa:	000b      	movs	r3, r1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b02      	ldr	r3, [pc, #8]	@ (8000708 <incrementMinutes_tens+0x20>)
 8000700:	70da      	strb	r2, [r3, #3]
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <incrementHours_units>:

void incrementHours_units() {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	if (currentTime.hours_tens == 2) {
 8000710:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <incrementHours_units+0x48>)
 8000712:	795b      	ldrb	r3, [r3, #5]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d10e      	bne.n	8000736 <incrementHours_units+0x2a>
		currentTime.hours_units = (currentTime.hours_units + 1) % 4;  // Limite de 24 horas
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <incrementHours_units+0x48>)
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <incrementHours_units+0x4c>)
 8000720:	4013      	ands	r3, r2
 8000722:	d504      	bpl.n	800072e <incrementHours_units+0x22>
 8000724:	3b01      	subs	r3, #1
 8000726:	2204      	movs	r2, #4
 8000728:	4252      	negs	r2, r2
 800072a:	4313      	orrs	r3, r2
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <incrementHours_units+0x48>)
 8000732:	711a      	strb	r2, [r3, #4]
	} else {
		currentTime.hours_units = (currentTime.hours_units + 1) % 10;
	}
}
 8000734:	e00a      	b.n	800074c <incrementHours_units+0x40>
		currentTime.hours_units = (currentTime.hours_units + 1) % 10;
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <incrementHours_units+0x48>)
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	210a      	movs	r1, #10
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fe52 	bl	80003e8 <__aeabi_idivmod>
 8000744:	000b      	movs	r3, r1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b02      	ldr	r3, [pc, #8]	@ (8000754 <incrementHours_units+0x48>)
 800074a:	711a      	strb	r2, [r3, #4]
}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	20000090 	.word	0x20000090
 8000758:	80000003 	.word	0x80000003

0800075c <incrementHours_tens>:

void incrementHours_tens() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    currentTime.hours_tens = (currentTime.hours_tens + 1) % 3;  // Limite de 24 horas
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <incrementHours_tens+0x20>)
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	3301      	adds	r3, #1
 8000766:	2103      	movs	r1, #3
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fe3d 	bl	80003e8 <__aeabi_idivmod>
 800076e:	000b      	movs	r3, r1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b02      	ldr	r3, [pc, #8]	@ (800077c <incrementHours_tens+0x20>)
 8000774:	715a      	strb	r2, [r3, #5]
}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000090 	.word	0x20000090

08000780 <incrementAlarmMinutes_units>:

void incrementAlarmMinutes_units() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    alarmTime.minutes_units = (alarmTime.minutes_units + 1) % 10;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <incrementAlarmMinutes_units+0x20>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	3301      	adds	r3, #1
 800078a:	210a      	movs	r1, #10
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fe2b 	bl	80003e8 <__aeabi_idivmod>
 8000792:	000b      	movs	r3, r1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b02      	ldr	r3, [pc, #8]	@ (80007a0 <incrementAlarmMinutes_units+0x20>)
 8000798:	709a      	strb	r2, [r3, #2]
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000098 	.word	0x20000098

080007a4 <incrementAlarmMinutes_tens>:

void incrementAlarmMinutes_tens() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    alarmTime.minutes_tens = (alarmTime.minutes_tens + 1) % 6;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <incrementAlarmMinutes_tens+0x20>)
 80007aa:	78db      	ldrb	r3, [r3, #3]
 80007ac:	3301      	adds	r3, #1
 80007ae:	2106      	movs	r1, #6
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fe19 	bl	80003e8 <__aeabi_idivmod>
 80007b6:	000b      	movs	r3, r1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b02      	ldr	r3, [pc, #8]	@ (80007c4 <incrementAlarmMinutes_tens+0x20>)
 80007bc:	70da      	strb	r2, [r3, #3]
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000098 	.word	0x20000098

080007c8 <incrementAlarmHours_units>:

void incrementAlarmHours_units() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    if (alarmTime.hours_tens == 2) {
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <incrementAlarmHours_units+0x48>)
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d10e      	bne.n	80007f2 <incrementAlarmHours_units+0x2a>
        alarmTime.hours_units = (alarmTime.hours_units + 1) % 4;  // Limite de 24 horas
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <incrementAlarmHours_units+0x48>)
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a0e      	ldr	r2, [pc, #56]	@ (8000814 <incrementAlarmHours_units+0x4c>)
 80007dc:	4013      	ands	r3, r2
 80007de:	d504      	bpl.n	80007ea <incrementAlarmHours_units+0x22>
 80007e0:	3b01      	subs	r3, #1
 80007e2:	2204      	movs	r2, #4
 80007e4:	4252      	negs	r2, r2
 80007e6:	4313      	orrs	r3, r2
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <incrementAlarmHours_units+0x48>)
 80007ee:	711a      	strb	r2, [r3, #4]
    } else {
        alarmTime.hours_units = (alarmTime.hours_units + 1) % 10;
    }
}
 80007f0:	e00a      	b.n	8000808 <incrementAlarmHours_units+0x40>
        alarmTime.hours_units = (alarmTime.hours_units + 1) % 10;
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <incrementAlarmHours_units+0x48>)
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	3301      	adds	r3, #1
 80007f8:	210a      	movs	r1, #10
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff fdf4 	bl	80003e8 <__aeabi_idivmod>
 8000800:	000b      	movs	r3, r1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <incrementAlarmHours_units+0x48>)
 8000806:	711a      	strb	r2, [r3, #4]
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	20000098 	.word	0x20000098
 8000814:	80000003 	.word	0x80000003

08000818 <incrementAlarmHours_tens>:

void incrementAlarmHours_tens() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    alarmTime.hours_tens = (alarmTime.hours_tens + 1) % 3;  // Limite de 24 horas
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <incrementAlarmHours_tens+0x20>)
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	3301      	adds	r3, #1
 8000822:	2103      	movs	r1, #3
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff fddf 	bl	80003e8 <__aeabi_idivmod>
 800082a:	000b      	movs	r3, r1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <incrementAlarmHours_tens+0x20>)
 8000830:	715a      	strb	r2, [r3, #5]
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000098 	.word	0x20000098

0800083c <saveAlarm>:


void saveAlarm() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    // Implementar a lógica para salvar o alarme
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <updateRelogio>:

void updateRelogio(){
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  // Implementar a lógica para atualizar o relógio com o RTC (RUNNING MODE)

  // Implementar a lógica para atualizar o relógio sem atualizar o RTC (CONFIG MODE)
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <readButtons>:
      // HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
      // HAL_Delay(1000);

}

void readButtons() {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
    uint8_t Config_Set = 0;
 8000856:	1d7b      	adds	r3, r7, #5
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(GPIOA, SEL_MODE_Pin) == GPIO_PIN_SET) {
 800085c:	2380      	movs	r3, #128	@ 0x80
 800085e:	011a      	lsls	r2, r3, #4
 8000860:	23a0      	movs	r3, #160	@ 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fea0 	bl	80015ac <HAL_GPIO_ReadPin>
 800086c:	0003      	movs	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d115      	bne.n	800089e <readButtons+0x4e>
        Config_Set = (Config_Set + 1) % 2;
 8000872:	1d7b      	adds	r3, r7, #5
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a67      	ldr	r2, [pc, #412]	@ (8000a18 <readButtons+0x1c8>)
 800087a:	4013      	ands	r3, r2
 800087c:	d504      	bpl.n	8000888 <readButtons+0x38>
 800087e:	3b01      	subs	r3, #1
 8000880:	2202      	movs	r2, #2
 8000882:	4252      	negs	r2, r2
 8000884:	4313      	orrs	r3, r2
 8000886:	3301      	adds	r3, #1
 8000888:	001a      	movs	r2, r3
 800088a:	1d7b      	adds	r3, r7, #5
 800088c:	701a      	strb	r2, [r3, #0]
        currentMode = Config_Set ? MODE_CONFIG_ALARM : MODE_CONFIG_CLOCK;
 800088e:	1d7b      	adds	r3, r7, #5
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	4193      	sbcs	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	001a      	movs	r2, r3
 800089a:	4b60      	ldr	r3, [pc, #384]	@ (8000a1c <readButtons+0x1cc>)
 800089c:	701a      	strb	r2, [r3, #0]
    }

    if (currentMode == MODE_CONFIG_CLOCK) {
 800089e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a1c <readButtons+0x1cc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d15e      	bne.n	8000964 <readButtons+0x114>
        uint8_t confirm = 0;
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]

        while (!confirm) {
 80008ac:	e055      	b.n	800095a <readButtons+0x10a>
            if (HAL_GPIO_ReadPin(SEC_UNID_GPIO_Port, SEC_UNID_Pin) == GPIO_PIN_SET) { incrementSeconds_units(); }
 80008ae:	23a0      	movs	r3, #160	@ 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2120      	movs	r1, #32
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fe79 	bl	80015ac <HAL_GPIO_ReadPin>
 80008ba:	0003      	movs	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d101      	bne.n	80008c4 <readButtons+0x74>
 80008c0:	f7ff fedc 	bl	800067c <incrementSeconds_units>
            if (HAL_GPIO_ReadPin(SEC_DEZ_GPIO_Port, SEC_DEZ_Pin) == GPIO_PIN_SET) { incrementSeconds_tens(); }
 80008c4:	23a0      	movs	r3, #160	@ 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fe6e 	bl	80015ac <HAL_GPIO_ReadPin>
 80008d0:	0003      	movs	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d101      	bne.n	80008da <readButtons+0x8a>
 80008d6:	f7ff fee3 	bl	80006a0 <incrementSeconds_tens>
            if (HAL_GPIO_ReadPin(MIN_UNID_GPIO_Port, MIN_UNID_Pin) == GPIO_PIN_SET) { incrementMinutes_units(); }
 80008da:	23a0      	movs	r3, #160	@ 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fe63 	bl	80015ac <HAL_GPIO_ReadPin>
 80008e6:	0003      	movs	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d101      	bne.n	80008f0 <readButtons+0xa0>
 80008ec:	f7ff feea 	bl	80006c4 <incrementMinutes_units>
            if (HAL_GPIO_ReadPin(MIN_DEZ_GPIO_Port, MIN_DEZ_Pin) == GPIO_PIN_SET) { incrementMinutes_tens(); }
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	005a      	lsls	r2, r3, #1
 80008f4:	23a0      	movs	r3, #160	@ 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fe56 	bl	80015ac <HAL_GPIO_ReadPin>
 8000900:	0003      	movs	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <readButtons+0xba>
 8000906:	f7ff feef 	bl	80006e8 <incrementMinutes_tens>
            if (HAL_GPIO_ReadPin(HOUR_UNID_GPIO_Port, HOUR_UNID_Pin) == GPIO_PIN_SET) { incrementHours_units(); }
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	009a      	lsls	r2, r3, #2
 800090e:	23a0      	movs	r3, #160	@ 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fe49 	bl	80015ac <HAL_GPIO_ReadPin>
 800091a:	0003      	movs	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d101      	bne.n	8000924 <readButtons+0xd4>
 8000920:	f7ff fef4 	bl	800070c <incrementHours_units>
            if (HAL_GPIO_ReadPin(HOUR_DEZ_GPIO_Port, HOUR_DEZ_Pin) == GPIO_PIN_SET) { incrementHours_tens(); }
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	00da      	lsls	r2, r3, #3
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fe3c 	bl	80015ac <HAL_GPIO_ReadPin>
 8000934:	0003      	movs	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d101      	bne.n	800093e <readButtons+0xee>
 800093a:	f7ff ff0f 	bl	800075c <incrementHours_tens>

            if (HAL_GPIO_ReadPin(GPIOA, CONFIRM_Pin) == GPIO_PIN_SET) {
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	015a      	lsls	r2, r3, #5
 8000942:	23a0      	movs	r3, #160	@ 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fe2f 	bl	80015ac <HAL_GPIO_ReadPin>
 800094e:	0003      	movs	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d102      	bne.n	800095a <readButtons+0x10a>
                confirm = 1;
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
        while (!confirm) {
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0a5      	beq.n	80008ae <readButtons+0x5e>
 8000962:	e052      	b.n	8000a0a <readButtons+0x1ba>
            }
        }
    } else if (currentMode == MODE_CONFIG_ALARM) {
 8000964:	4b2d      	ldr	r3, [pc, #180]	@ (8000a1c <readButtons+0x1cc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d14e      	bne.n	8000a0a <readButtons+0x1ba>
        uint8_t confirm = 0;
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]

        while (!confirm) {
 8000972:	e046      	b.n	8000a02 <readButtons+0x1b2>
            if (HAL_GPIO_ReadPin(MIN_UNID_GPIO_Port, MIN_UNID_Pin) == GPIO_PIN_SET) { incrementAlarmMinutes_units(); }
 8000974:	23a0      	movs	r3, #160	@ 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fe16 	bl	80015ac <HAL_GPIO_ReadPin>
 8000980:	0003      	movs	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d101      	bne.n	800098a <readButtons+0x13a>
 8000986:	f7ff fefb 	bl	8000780 <incrementAlarmMinutes_units>
            if (HAL_GPIO_ReadPin(MIN_DEZ_GPIO_Port, MIN_DEZ_Pin) == GPIO_PIN_SET) { incrementAlarmMinutes_tens(); }
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	005a      	lsls	r2, r3, #1
 800098e:	23a0      	movs	r3, #160	@ 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fe09 	bl	80015ac <HAL_GPIO_ReadPin>
 800099a:	0003      	movs	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <readButtons+0x154>
 80009a0:	f7ff ff00 	bl	80007a4 <incrementAlarmMinutes_tens>
            if (HAL_GPIO_ReadPin(HOUR_UNID_GPIO_Port, HOUR_UNID_Pin) == GPIO_PIN_SET) { incrementAlarmHours_units(); }
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	009a      	lsls	r2, r3, #2
 80009a8:	23a0      	movs	r3, #160	@ 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fdfc 	bl	80015ac <HAL_GPIO_ReadPin>
 80009b4:	0003      	movs	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d101      	bne.n	80009be <readButtons+0x16e>
 80009ba:	f7ff ff05 	bl	80007c8 <incrementAlarmHours_units>
            if (HAL_GPIO_ReadPin(HOUR_DEZ_GPIO_Port, HOUR_DEZ_Pin) == GPIO_PIN_SET) { incrementAlarmHours_tens(); }
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	00da      	lsls	r2, r3, #3
 80009c2:	23a0      	movs	r3, #160	@ 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fdef 	bl	80015ac <HAL_GPIO_ReadPin>
 80009ce:	0003      	movs	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <readButtons+0x188>
 80009d4:	f7ff ff20 	bl	8000818 <incrementAlarmHours_tens>

            if (HAL_GPIO_ReadPin(CONFIRM_GPIO_Port, CONFIRM_Pin) == GPIO_PIN_SET) {
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	015a      	lsls	r2, r3, #5
 80009dc:	23a0      	movs	r3, #160	@ 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fde2 	bl	80015ac <HAL_GPIO_ReadPin>
 80009e8:	0003      	movs	r3, r0
 80009ea:	0019      	movs	r1, r3
 80009ec:	1dbb      	adds	r3, r7, #6
 80009ee:	1dba      	adds	r2, r7, #6
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	2901      	cmp	r1, #1
 80009f6:	d104      	bne.n	8000a02 <readButtons+0x1b2>
                confirm = 1;
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
                saveAlarm();
 80009fe:	f7ff ff1d 	bl	800083c <saveAlarm>
        while (!confirm) {
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0b4      	beq.n	8000974 <readButtons+0x124>
            }
        }
    }

    currentMode = MODE_RUNNING;
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <readButtons+0x1cc>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	701a      	strb	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	80000001 	.word	0x80000001
 8000a1c:	20000000 	.word	0x20000000

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a24:	f000 fb06 	bl	8001034 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f812 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 f9ae 	bl	8000d8c <MX_GPIO_Init>
  MX_RTC_Init();
 8000a30:	f000 f888 	bl	8000b44 <MX_RTC_Init>
  MX_TIM2_Init();
 8000a34:	f000 f92c 	bl	8000c90 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  readButtons();
 8000a38:	f7ff ff0a 	bl	8000850 <readButtons>

	  if (currentMode == MODE_RUNNING) {
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <main+0x2c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d1f9      	bne.n	8000a38 <main+0x18>
		  updateRelogio();
 8000a44:	f7ff feff 	bl	8000846 <updateRelogio>
	  readButtons();
 8000a48:	e7f6      	b.n	8000a38 <main+0x18>
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	20000000 	.word	0x20000000

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b099      	sub	sp, #100	@ 0x64
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	242c      	movs	r4, #44	@ 0x2c
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2334      	movs	r3, #52	@ 0x34
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	f002 fe4f 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a66:	2318      	movs	r3, #24
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f002 fe47 	bl	8003704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a76:	003b      	movs	r3, r7
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2318      	movs	r3, #24
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f002 fe40 	bl	8003704 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <SystemClock_Config+0xe8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a2c      	ldr	r2, [pc, #176]	@ (8000b3c <SystemClock_Config+0xec>)
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <SystemClock_Config+0xe8>)
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	0109      	lsls	r1, r1, #4
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a96:	f000 fdc3 	bl	8001620 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a9a:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000a9e:	4b28      	ldr	r3, [pc, #160]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000aa0:	4926      	ldr	r1, [pc, #152]	@ (8000b3c <SystemClock_Config+0xec>)
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2214      	movs	r2, #20
 8000aaa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	0052      	lsls	r2, r2, #1
 8000ab2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ab4:	0021      	movs	r1, r4
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fdb3 	bl	800163c <HAL_RCC_OscConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ada:	f000 f9c5 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	2118      	movs	r1, #24
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	220f      	movs	r2, #15
 8000ae4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2100      	movs	r1, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 f916 	bl	8001d34 <HAL_RCC_ClockConfig>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b0c:	f000 f9ac 	bl	8000e68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2220      	movs	r2, #32
 8000b14:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	0252      	lsls	r2, r2, #9
 8000b1c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1e:	003b      	movs	r3, r7
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 faf5 	bl	8002110 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000b2a:	f000 f99d 	bl	8000e68 <Error_Handler>
  }
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b019      	add	sp, #100	@ 0x64
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	40007000 	.word	0x40007000
 8000b3c:	ffffe7ff 	.word	0xffffe7ff
 8000b40:	40021000 	.word	0x40021000

08000b44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b090      	sub	sp, #64	@ 0x40
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b4a:	232c      	movs	r3, #44	@ 0x2c
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2314      	movs	r3, #20
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f002 fdd5 	bl	8003704 <memset>
  RTC_DateTypeDef sDate = {0};
 8000b5a:	2328      	movs	r3, #40	@ 0x28
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000b62:	003b      	movs	r3, r7
 8000b64:	0018      	movs	r0, r3
 8000b66:	2328      	movs	r3, #40	@ 0x28
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f002 fdca 	bl	8003704 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b70:	4b45      	ldr	r3, [pc, #276]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b72:	4a46      	ldr	r2, [pc, #280]	@ (8000c8c <MX_RTC_Init+0x148>)
 8000b74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b76:	4b44      	ldr	r3, [pc, #272]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b7c:	4b42      	ldr	r3, [pc, #264]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b7e:	227f      	movs	r2, #127	@ 0x7f
 8000b80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b82:	4b41      	ldr	r3, [pc, #260]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b84:	22ff      	movs	r2, #255	@ 0xff
 8000b86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b88:	4b3f      	ldr	r3, [pc, #252]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b94:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ba0:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fbe0 	bl	8002368 <HAL_RTC_Init>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000bac:	f000 f95c 	bl	8000e68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bb0:	212c      	movs	r1, #44	@ 0x2c
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bd0:	1879      	adds	r1, r7, r1
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fc62 	bl	80024a0 <HAL_RTC_SetTime>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000be0:	f000 f942 	bl	8000e68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000be4:	2128      	movs	r1, #40	@ 0x28
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bfe:	1879      	adds	r1, r7, r1
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fcf5 	bl	80025f4 <HAL_RTC_SetDate>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000c0e:	f000 f92b 	bl	8000e68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c30:	003b      	movs	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c36:	003b      	movs	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c3c:	003b      	movs	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c42:	003b      	movs	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c48:	003b      	movs	r3, r7
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	0052      	lsls	r2, r2, #1
 8000c56:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c58:	0039      	movs	r1, r7
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f001 fd5c 	bl	800271c <HAL_RTC_SetAlarm_IT>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000c68:	f000 f8fe 	bl	8000e68 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_RTC_Init+0x144>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	2100      	movs	r1, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 ffc2 	bl	8002bfc <HAL_RTCEx_SetWakeUpTimer_IT>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 8000c7c:	f000 f8f4 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b010      	add	sp, #64	@ 0x40
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000002c 	.word	0x2000002c
 8000c8c:	40002800 	.word	0x40002800

08000c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	2318      	movs	r3, #24
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f002 fd2f 	bl	8003704 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	0018      	movs	r0, r3
 8000cac:	2308      	movs	r3, #8
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f002 fd27 	bl	8003704 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2310      	movs	r3, #16
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f002 fd20 	bl	8003704 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	05d2      	lsls	r2, r2, #23
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000cce:	2207      	movs	r2, #7
 8000cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000cda:	2207      	movs	r2, #7
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cea:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000cec:	0018      	movs	r0, r3
 8000cee:	f002 f89d 	bl	8002e2c <HAL_TIM_Base_Init>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 f8b7 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfa:	2118      	movs	r1, #24
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	0152      	lsls	r2, r2, #5
 8000d02:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d04:	187a      	adds	r2, r7, r1
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f002 f9dc 	bl	80030c8 <HAL_TIM_ConfigClockSource>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d14:	f000 f8a8 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f002 f8c6 	bl	8002eac <HAL_TIM_PWM_Init>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d24:	f000 f8a0 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2110      	movs	r1, #16
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d36:	187a      	adds	r2, r7, r1
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 fc89 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000d46:	f000 f88f 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	2260      	movs	r2, #96	@ 0x60
 8000d4e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3;
 8000d50:	003b      	movs	r3, r7
 8000d52:	2203      	movs	r2, #3
 8000d54:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d62:	0039      	movs	r1, r7
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 f8e7 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000d72:	f000 f879 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d76:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <MX_TIM2_Init+0xf8>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f8c5 	bl	8000f08 <HAL_TIM_MspPostInit>

}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b00a      	add	sp, #40	@ 0x28
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	20000050 	.word	0x20000050

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	240c      	movs	r4, #12
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	0018      	movs	r0, r3
 8000d98:	2314      	movs	r3, #20
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f002 fcb1 	bl	8003704 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000da8:	2104      	movs	r1, #4
 8000daa:	430a      	orrs	r2, r1
 8000dac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dae:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db2:	2204      	movs	r2, #4
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc6:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <MX_GPIO_Init+0xd8>)
 8000dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DATA_Pin|SCLK_Pin|XLAT_Pin, GPIO_PIN_RESET);
 8000dd2:	23a0      	movs	r3, #160	@ 0xa0
 8000dd4:	05db      	lsls	r3, r3, #23
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	210e      	movs	r1, #14
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fc03 	bl	80015e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLANK_GPIO_Port, BLANK_Pin, GPIO_PIN_SET);
 8000de0:	23a0      	movs	r3, #160	@ 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fbfc 	bl	80015e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DATA_Pin SCLK_Pin XLAT_Pin BLANK_Pin */
  GPIO_InitStruct.Pin = DATA_Pin|SCLK_Pin|XLAT_Pin|BLANK_Pin;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	221e      	movs	r2, #30
 8000df2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2201      	movs	r2, #1
 8000df8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	193a      	adds	r2, r7, r4
 8000e08:	23a0      	movs	r3, #160	@ 0xa0
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fa5e 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEC_UNID_Pin SEC_DEZ_Pin MIN_UNID_Pin MIN_DEZ_Pin
                           HOUR_UNID_Pin HOUR_DEZ_Pin SEL_MODE_Pin CONFIRM_Pin */
  GPIO_InitStruct.Pin = SEC_UNID_Pin|SEC_DEZ_Pin|MIN_UNID_Pin|MIN_DEZ_Pin
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	22ff      	movs	r2, #255	@ 0xff
 8000e18:	0152      	lsls	r2, r2, #5
 8000e1a:	601a      	str	r2, [r3, #0]
                          |HOUR_UNID_Pin|HOUR_DEZ_Pin|SEL_MODE_Pin|CONFIRM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	193a      	adds	r2, r7, r4
 8000e2a:	23a0      	movs	r3, #160	@ 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 fa4d 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000e36:	0021      	movs	r1, r4
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2280      	movs	r2, #128	@ 0x80
 8000e3c:	0212      	lsls	r2, r2, #8
 8000e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2202      	movs	r2, #2
 8000e4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	187a      	adds	r2, r7, r1
 8000e4e:	23a0      	movs	r3, #160	@ 0xa0
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 fa3b 	bl	80012d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b009      	add	sp, #36	@ 0x24
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	40021000 	.word	0x40021000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <HAL_MspInit+0x24>)
 8000e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_MspInit+0x24>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <HAL_MspInit+0x24>)
 8000e86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_MspInit+0x24>)
 8000e8a:	2180      	movs	r1, #128	@ 0x80
 8000e8c:	0549      	lsls	r1, r1, #21
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_RTC_MspInit+0x38>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10e      	bne.n	8000ecc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_RTC_MspInit+0x3c>)
 8000eb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <HAL_RTC_MspInit+0x3c>)
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	02c9      	lsls	r1, r1, #11
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f000 f9d3 	bl	800126c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f000 f9e5 	bl	8001296 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40002800 	.word	0x40002800
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d105      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <HAL_TIM_Base_MspInit+0x28>)
 8000ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_TIM_Base_MspInit+0x28>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	240c      	movs	r4, #12
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	0018      	movs	r0, r3
 8000f16:	2314      	movs	r3, #20
 8000f18:	001a      	movs	r2, r3
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f002 fbf2 	bl	8003704 <memset>
  if(htim->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2380      	movs	r3, #128	@ 0x80
 8000f26:	05db      	lsls	r3, r3, #23
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d122      	bne.n	8000f72 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <HAL_TIM_MspPostInit+0x74>)
 8000f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_TIM_MspPostInit+0x74>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_TIM_MspPostInit+0x74>)
 8000f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000f44:	0021      	movs	r1, r4
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2202      	movs	r2, #2
 8000f50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2202      	movs	r2, #2
 8000f62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000f64:	187a      	adds	r2, r7, r1
 8000f66:	23a0      	movs	r3, #160	@ 0xa0
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 f9af 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b009      	add	sp, #36	@ 0x24
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	40021000 	.word	0x40021000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	e7fd      	b.n	8000f84 <NMI_Handler+0x4>

08000f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	e7fd      	b.n	8000f8c <HardFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f898 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <RTC_IRQHandler+0x1c>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 fd10 	bl	80029e0 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <RTC_IRQHandler+0x1c>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f001 fef2 	bl	8002dac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	2000002c 	.word	0x2000002c

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fe2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	f7ff fff6 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f002 fb81 	bl	8003714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fd05 	bl	8000a20 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
   ldr   r0, =_estack
 8001018:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001024:	080037a0 	.word	0x080037a0
  ldr r2, =_sbss
 8001028:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800102c:	200000a4 	.word	0x200000a4

08001030 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_COMP_IRQHandler>
	...

08001034 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_Init+0x3c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_Init+0x3c>)
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f811 	bl	8001074 <HAL_InitTick>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d003      	beq.n	800105e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e001      	b.n	8001062 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105e:	f7ff ff09 	bl	8000e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_InitTick+0x5c>)
 800107e:	681c      	ldr	r4, [r3, #0]
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_InitTick+0x60>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	0019      	movs	r1, r3
 8001086:	23fa      	movs	r3, #250	@ 0xfa
 8001088:	0098      	lsls	r0, r3, #2
 800108a:	f7ff f83d 	bl	8000108 <__udivsi3>
 800108e:	0003      	movs	r3, r0
 8001090:	0019      	movs	r1, r3
 8001092:	0020      	movs	r0, r4
 8001094:	f7ff f838 	bl	8000108 <__udivsi3>
 8001098:	0003      	movs	r3, r0
 800109a:	0018      	movs	r0, r3
 800109c:	f000 f90b 	bl	80012b6 <HAL_SYSTICK_Config>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e00f      	b.n	80010c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d80b      	bhi.n	80010c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	2301      	movs	r3, #1
 80010b2:	425b      	negs	r3, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 f8d8 	bl	800126c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_InitTick+0x64>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b003      	add	sp, #12
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20000004 	.word	0x20000004
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_IncTick+0x20>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	18d2      	adds	r2, r2, r3
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_IncTick+0x20>)
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	200000a0 	.word	0x200000a0

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b02      	ldr	r3, [pc, #8]	@ (8001110 <HAL_GetTick+0x10>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	200000a0 	.word	0x200000a0

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b7f      	cmp	r3, #127	@ 0x7f
 8001126:	d809      	bhi.n	800113c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	001a      	movs	r2, r3
 800112e:	231f      	movs	r3, #31
 8001130:	401a      	ands	r2, r3
 8001132:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <__NVIC_EnableIRQ+0x30>)
 8001134:	2101      	movs	r1, #1
 8001136:	4091      	lsls	r1, r2
 8001138:	000a      	movs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
  }
}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	0002      	movs	r2, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b7f      	cmp	r3, #127	@ 0x7f
 800115c:	d828      	bhi.n	80011b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <__NVIC_SetPriority+0xd4>)
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	33c0      	adds	r3, #192	@ 0xc0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	589b      	ldr	r3, [r3, r2]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	2203      	movs	r2, #3
 8001176:	400a      	ands	r2, r1
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	21ff      	movs	r1, #255	@ 0xff
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	43d2      	mvns	r2, r2
 8001182:	401a      	ands	r2, r3
 8001184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	22ff      	movs	r2, #255	@ 0xff
 800118c:	401a      	ands	r2, r3
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	2303      	movs	r3, #3
 8001196:	4003      	ands	r3, r0
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	481f      	ldr	r0, [pc, #124]	@ (800121c <__NVIC_SetPriority+0xd4>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	430a      	orrs	r2, r1
 80011a8:	33c0      	adds	r3, #192	@ 0xc0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ae:	e031      	b.n	8001214 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <__NVIC_SetPriority+0xd8>)
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	0019      	movs	r1, r3
 80011b8:	230f      	movs	r3, #15
 80011ba:	400b      	ands	r3, r1
 80011bc:	3b08      	subs	r3, #8
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3306      	adds	r3, #6
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	3304      	adds	r3, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1dfa      	adds	r2, r7, #7
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	0011      	movs	r1, r2
 80011d0:	2203      	movs	r2, #3
 80011d2:	400a      	ands	r2, r1
 80011d4:	00d2      	lsls	r2, r2, #3
 80011d6:	21ff      	movs	r1, #255	@ 0xff
 80011d8:	4091      	lsls	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	43d2      	mvns	r2, r2
 80011de:	401a      	ands	r2, r3
 80011e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	401a      	ands	r2, r3
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0018      	movs	r0, r3
 80011f0:	2303      	movs	r3, #3
 80011f2:	4003      	ands	r3, r0
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	4809      	ldr	r0, [pc, #36]	@ (8001220 <__NVIC_SetPriority+0xd8>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	001c      	movs	r4, r3
 8001200:	230f      	movs	r3, #15
 8001202:	4023      	ands	r3, r4
 8001204:	3b08      	subs	r3, #8
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	430a      	orrs	r2, r1
 800120a:	3306      	adds	r3, #6
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	18c3      	adds	r3, r0, r3
 8001210:	3304      	adds	r3, #4
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b003      	add	sp, #12
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	1e5a      	subs	r2, r3, #1
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	045b      	lsls	r3, r3, #17
 8001234:	429a      	cmp	r2, r3
 8001236:	d301      	bcc.n	800123c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001238:	2301      	movs	r3, #1
 800123a:	e010      	b.n	800125e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <SysTick_Config+0x44>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	3a01      	subs	r2, #1
 8001242:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	2103      	movs	r1, #3
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff ff7c 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x44>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	210f      	movs	r1, #15
 8001278:	187b      	adds	r3, r7, r1
 800127a:	1c02      	adds	r2, r0, #0
 800127c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	187b      	adds	r3, r7, r1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25b      	sxtb	r3, r3
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b004      	add	sp, #16
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	0002      	movs	r2, r0
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff ff33 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff ffaf 	bl	8001224 <SysTick_Config>
 80012c6:	0003      	movs	r3, r0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012e6:	e149      	b.n	800157c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4091      	lsls	r1, r2
 80012f2:	000a      	movs	r2, r1
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d100      	bne.n	8001300 <HAL_GPIO_Init+0x30>
 80012fe:	e13a      	b.n	8001576 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2203      	movs	r2, #3
 8001306:	4013      	ands	r3, r2
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2203      	movs	r2, #3
 8001312:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001314:	2b02      	cmp	r3, #2
 8001316:	d130      	bne.n	800137a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	409a      	lsls	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134e:	2201      	movs	r2, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	2201      	movs	r2, #1
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	4013      	ands	r3, r2
 8001382:	2b03      	cmp	r3, #3
 8001384:	d017      	beq.n	80013b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2203      	movs	r2, #3
 80013bc:	4013      	ands	r3, r2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d123      	bne.n	800140a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	58d3      	ldr	r3, [r2, r3]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2207      	movs	r2, #7
 80013d4:	4013      	ands	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2107      	movs	r1, #7
 80013ee:	400b      	ands	r3, r1
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	6939      	ldr	r1, [r7, #16]
 8001408:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	401a      	ands	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	23c0      	movs	r3, #192	@ 0xc0
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d100      	bne.n	800144c <HAL_GPIO_Init+0x17c>
 800144a:	e094      	b.n	8001576 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <HAL_GPIO_Init+0x2c4>)
 800144e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001450:	4b50      	ldr	r3, [pc, #320]	@ (8001594 <HAL_GPIO_Init+0x2c4>)
 8001452:	2101      	movs	r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001458:	4a4f      	ldr	r2, [pc, #316]	@ (8001598 <HAL_GPIO_Init+0x2c8>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	589b      	ldr	r3, [r3, r2]
 8001464:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2203      	movs	r2, #3
 800146a:	4013      	ands	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	409a      	lsls	r2, r3
 8001472:	0013      	movs	r3, r2
 8001474:	43da      	mvns	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	23a0      	movs	r3, #160	@ 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	429a      	cmp	r2, r3
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x1de>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a44      	ldr	r2, [pc, #272]	@ (800159c <HAL_GPIO_Init+0x2cc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x1da>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a43      	ldr	r2, [pc, #268]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x1d6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a42      	ldr	r2, [pc, #264]	@ (80015a4 <HAL_GPIO_Init+0x2d4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x1d2>
 800149e:	2305      	movs	r3, #5
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014ae:	2300      	movs	r3, #0
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	2103      	movs	r1, #3
 80014b4:	400a      	ands	r2, r1
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	@ (8001598 <HAL_GPIO_Init+0x2c8>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ce:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	035b      	lsls	r3, r3, #13
 80014e6:	4013      	ands	r3, r2
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43da      	mvns	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	039b      	lsls	r3, r3, #14
 8001510:	4013      	ands	r3, r2
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	4013      	ands	r3, r2
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <HAL_GPIO_Init+0x2d8>)
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	40da      	lsrs	r2, r3
 8001584:	1e13      	subs	r3, r2, #0
 8001586:	d000      	beq.n	800158a <HAL_GPIO_Init+0x2ba>
 8001588:	e6ae      	b.n	80012e8 <HAL_GPIO_Init+0x18>
  }
}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b006      	add	sp, #24
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000
 800159c:	50000400 	.word	0x50000400
 80015a0:	50000800 	.word	0x50000800
 80015a4:	50001c00 	.word	0x50001c00
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	000a      	movs	r2, r1
 80015b6:	1cbb      	adds	r3, r7, #2
 80015b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	1cba      	adds	r2, r7, #2
 80015c0:	8812      	ldrh	r2, [r2, #0]
 80015c2:	4013      	ands	r3, r2
 80015c4:	d004      	beq.n	80015d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015c6:	230f      	movs	r3, #15
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e003      	b.n	80015d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d0:	230f      	movs	r3, #15
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015d8:	230f      	movs	r3, #15
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	781b      	ldrb	r3, [r3, #0]
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	0008      	movs	r0, r1
 80015f0:	0011      	movs	r1, r2
 80015f2:	1cbb      	adds	r3, r7, #2
 80015f4:	1c02      	adds	r2, r0, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	1c7b      	adds	r3, r7, #1
 80015fa:	1c0a      	adds	r2, r1, #0
 80015fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015fe:	1c7b      	adds	r3, r7, #1
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	881a      	ldrh	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800160e:	e003      	b.n	8001618 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001610:	1cbb      	adds	r3, r7, #2
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_PWR_EnableBkUpAccess+0x18>)
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	0049      	lsls	r1, r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40007000 	.word	0x40007000

0800163c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 fb6c 	bl	8001d28 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001650:	4bc8      	ldr	r3, [pc, #800]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	220c      	movs	r2, #12
 8001656:	4013      	ands	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165a:	4bc6      	ldr	r3, [pc, #792]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	4013      	ands	r3, r2
 800166e:	d100      	bne.n	8001672 <HAL_RCC_OscConfig+0x36>
 8001670:	e07d      	b.n	800176e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b08      	cmp	r3, #8
 8001676:	d007      	beq.n	8001688 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d112      	bne.n	80016a4 <HAL_RCC_OscConfig+0x68>
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	2380      	movs	r3, #128	@ 0x80
 8001682:	025b      	lsls	r3, r3, #9
 8001684:	429a      	cmp	r2, r3
 8001686:	d10d      	bne.n	80016a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	4bba      	ldr	r3, [pc, #744]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	029b      	lsls	r3, r3, #10
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x5a>
 8001694:	e06a      	b.n	800176c <HAL_RCC_OscConfig+0x130>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d166      	bne.n	800176c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f000 fb42 	bl	8001d28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x84>
 80016b0:	4bb0      	ldr	r3, [pc, #704]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4baf      	ldr	r3, [pc, #700]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016b6:	2180      	movs	r1, #128	@ 0x80
 80016b8:	0249      	lsls	r1, r1, #9
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e027      	b.n	8001710 <HAL_RCC_OscConfig+0xd4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	23a0      	movs	r3, #160	@ 0xa0
 80016c6:	02db      	lsls	r3, r3, #11
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d10e      	bne.n	80016ea <HAL_RCC_OscConfig+0xae>
 80016cc:	4ba9      	ldr	r3, [pc, #676]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4ba8      	ldr	r3, [pc, #672]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016d2:	2180      	movs	r1, #128	@ 0x80
 80016d4:	02c9      	lsls	r1, r1, #11
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	4ba6      	ldr	r3, [pc, #664]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4ba5      	ldr	r3, [pc, #660]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016e0:	2180      	movs	r1, #128	@ 0x80
 80016e2:	0249      	lsls	r1, r1, #9
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e012      	b.n	8001710 <HAL_RCC_OscConfig+0xd4>
 80016ea:	4ba2      	ldr	r3, [pc, #648]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4ba1      	ldr	r3, [pc, #644]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016f0:	49a1      	ldr	r1, [pc, #644]	@ (8001978 <HAL_RCC_OscConfig+0x33c>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	4013      	ands	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4b9b      	ldr	r3, [pc, #620]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b9a      	ldr	r3, [pc, #616]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800170a:	499c      	ldr	r1, [pc, #624]	@ (800197c <HAL_RCC_OscConfig+0x340>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fcf2 	bl	8001100 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff fced 	bl	8001100 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	@ 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e2f9      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001734:	4b8f      	ldr	r3, [pc, #572]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0xe6>
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fcdd 	bl	8001100 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fcd8 	bl	8001100 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e2e4      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175e:	4b85      	ldr	r3, [pc, #532]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x110>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x13e>
 8001778:	e099      	b.n	80018ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001788:	4b7a      	ldr	r3, [pc, #488]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b79      	ldr	r3, [pc, #484]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800178e:	2120      	movs	r1, #32
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	2220      	movs	r2, #32
 8001798:	4393      	bics	r3, r2
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d13e      	bne.n	8001826 <HAL_RCC_OscConfig+0x1ea>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d13b      	bne.n	8001826 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017ae:	4b71      	ldr	r3, [pc, #452]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2204      	movs	r2, #4
 80017b4:	4013      	ands	r3, r2
 80017b6:	d004      	beq.n	80017c2 <HAL_RCC_OscConfig+0x186>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e2b2      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001980 <HAL_RCC_OscConfig+0x344>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	021a      	lsls	r2, r3, #8
 80017d2:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d8:	4b66      	ldr	r3, [pc, #408]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2209      	movs	r2, #9
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	4b64      	ldr	r3, [pc, #400]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 fbeb 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 80017ee:	0001      	movs	r1, r0
 80017f0:	4b60      	ldr	r3, [pc, #384]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	220f      	movs	r2, #15
 80017f8:	4013      	ands	r3, r2
 80017fa:	4a62      	ldr	r2, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x348>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	000a      	movs	r2, r1
 8001800:	40da      	lsrs	r2, r3
 8001802:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <HAL_RCC_OscConfig+0x34c>)
 8001804:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001806:	4b61      	ldr	r3, [pc, #388]	@ (800198c <HAL_RCC_OscConfig+0x350>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2513      	movs	r5, #19
 800180c:	197c      	adds	r4, r7, r5
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff fc30 	bl	8001074 <HAL_InitTick>
 8001814:	0003      	movs	r3, r0
 8001816:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001818:	197b      	adds	r3, r7, r5
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d046      	beq.n	80018ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001820:	197b      	adds	r3, r7, r5
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	e280      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d027      	beq.n	800187c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800182c:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2209      	movs	r2, #9
 8001832:	4393      	bics	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	4b4f      	ldr	r3, [pc, #316]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fc5f 	bl	8001100 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fc5a 	bl	8001100 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e266      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d0f1      	beq.n	8001848 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001864:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a45      	ldr	r2, [pc, #276]	@ (8001980 <HAL_RCC_OscConfig+0x344>)
 800186a:	4013      	ands	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	021a      	lsls	r2, r3, #8
 8001874:	4b3f      	ldr	r3, [pc, #252]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	e018      	b.n	80018ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187c:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b3c      	ldr	r3, [pc, #240]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001882:	2101      	movs	r1, #1
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fc3a 	bl	8001100 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fc35 	bl	8001100 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e241      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a4:	4b33      	ldr	r3, [pc, #204]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2204      	movs	r2, #4
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f1      	bne.n	8001892 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2210      	movs	r2, #16
 80018b4:	4013      	ands	r3, r2
 80018b6:	d100      	bne.n	80018ba <HAL_RCC_OscConfig+0x27e>
 80018b8:	e0a1      	b.n	80019fe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d140      	bne.n	8001942 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4013      	ands	r3, r2
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x29c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e227      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001990 <HAL_RCC_OscConfig+0x354>)
 80018de:	4013      	ands	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	0a19      	lsrs	r1, r3, #8
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	061a      	lsls	r2, r3, #24
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	0b5b      	lsrs	r3, r3, #13
 8001906:	3301      	adds	r3, #1
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	0212      	lsls	r2, r2, #8
 800190c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	210f      	movs	r1, #15
 8001916:	400b      	ands	r3, r1
 8001918:	491a      	ldr	r1, [pc, #104]	@ (8001984 <HAL_RCC_OscConfig+0x348>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <HAL_RCC_OscConfig+0x34c>)
 8001920:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <HAL_RCC_OscConfig+0x350>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2513      	movs	r5, #19
 8001928:	197c      	adds	r4, r7, r5
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fba2 	bl	8001074 <HAL_InitTick>
 8001930:	0003      	movs	r3, r0
 8001932:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001934:	197b      	adds	r3, r7, r5
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d060      	beq.n	80019fe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800193c:	197b      	adds	r3, r7, r5
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	e1f2      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03f      	beq.n	80019ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_OscConfig+0x338>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	0049      	lsls	r1, r1, #1
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fbd2 	bl	8001100 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001960:	e018      	b.n	8001994 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001962:	f7ff fbcd 	bl	8001100 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d911      	bls.n	8001994 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1d9      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
 8001974:	40021000 	.word	0x40021000
 8001978:	fffeffff 	.word	0xfffeffff
 800197c:	fffbffff 	.word	0xfffbffff
 8001980:	ffffe0ff 	.word	0xffffe0ff
 8001984:	08003774 	.word	0x08003774
 8001988:	20000004 	.word	0x20000004
 800198c:	20000008 	.word	0x20000008
 8001990:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001994:	4bc9      	ldr	r3, [pc, #804]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d0e0      	beq.n	8001962 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a0:	4bc6      	ldr	r3, [pc, #792]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4ac6      	ldr	r2, [pc, #792]	@ (8001cc0 <HAL_RCC_OscConfig+0x684>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	4bc3      	ldr	r3, [pc, #780]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b4:	4bc1      	ldr	r3, [pc, #772]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	0a19      	lsrs	r1, r3, #8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	061a      	lsls	r2, r3, #24
 80019c2:	4bbe      	ldr	r3, [pc, #760]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	e019      	b.n	80019fe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ca:	4bbc      	ldr	r3, [pc, #752]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4bbb      	ldr	r3, [pc, #748]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019d0:	49bc      	ldr	r1, [pc, #752]	@ (8001cc4 <HAL_RCC_OscConfig+0x688>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fb93 	bl	8001100 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e0:	f7ff fb8e 	bl	8001100 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e19a      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019f2:	4bb2      	ldr	r3, [pc, #712]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	4013      	ands	r3, r2
 8001a06:	d036      	beq.n	8001a76 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d019      	beq.n	8001a44 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a10:	4baa      	ldr	r3, [pc, #680]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a14:	4ba9      	ldr	r3, [pc, #676]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fb70 	bl	8001100 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fb6b 	bl	8001100 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e177      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a38:	4ba0      	ldr	r3, [pc, #640]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f1      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3ea>
 8001a42:	e018      	b.n	8001a76 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4b9d      	ldr	r3, [pc, #628]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a48:	4b9c      	ldr	r3, [pc, #624]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fb56 	bl	8001100 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fb51 	bl	8001100 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e15d      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a6c:	4b93      	ldr	r3, [pc, #588]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d1f1      	bne.n	8001a5a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x446>
 8001a80:	e0ae      	b.n	8001be0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2023      	movs	r0, #35	@ 0x23
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	055b      	lsls	r3, r3, #21
 8001a92:	4013      	ands	r3, r2
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b89      	ldr	r3, [pc, #548]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a9a:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	0549      	lsls	r1, r1, #21
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b87      	ldr	r3, [pc, #540]	@ (8001cc8 <HAL_RCC_OscConfig+0x68c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b84      	ldr	r3, [pc, #528]	@ (8001cc8 <HAL_RCC_OscConfig+0x68c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b83      	ldr	r3, [pc, #524]	@ (8001cc8 <HAL_RCC_OscConfig+0x68c>)
 8001abc:	2180      	movs	r1, #128	@ 0x80
 8001abe:	0049      	lsls	r1, r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fb1c 	bl	8001100 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff fb17 	bl	8001100 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	@ 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e123      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b79      	ldr	r3, [pc, #484]	@ (8001cc8 <HAL_RCC_OscConfig+0x68c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4cc>
 8001af8:	4b70      	ldr	r3, [pc, #448]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001afa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001afc:	4b6f      	ldr	r3, [pc, #444]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001afe:	2180      	movs	r1, #128	@ 0x80
 8001b00:	0049      	lsls	r1, r1, #1
 8001b02:	430a      	orrs	r2, r1
 8001b04:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b06:	e031      	b.n	8001b6c <HAL_RCC_OscConfig+0x530>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4ee>
 8001b10:	4b6a      	ldr	r3, [pc, #424]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b14:	4b69      	ldr	r3, [pc, #420]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b16:	496b      	ldr	r1, [pc, #428]	@ (8001cc4 <HAL_RCC_OscConfig+0x688>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b1c:	4b67      	ldr	r3, [pc, #412]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b22:	496a      	ldr	r1, [pc, #424]	@ (8001ccc <HAL_RCC_OscConfig+0x690>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b28:	e020      	b.n	8001b6c <HAL_RCC_OscConfig+0x530>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	23a0      	movs	r3, #160	@ 0xa0
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d10e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x518>
 8001b36:	4b61      	ldr	r3, [pc, #388]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b3a:	4b60      	ldr	r3, [pc, #384]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	00c9      	lsls	r1, r1, #3
 8001b40:	430a      	orrs	r2, r1
 8001b42:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b44:	4b5d      	ldr	r3, [pc, #372]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b48:	4b5c      	ldr	r3, [pc, #368]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b4a:	2180      	movs	r1, #128	@ 0x80
 8001b4c:	0049      	lsls	r1, r1, #1
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0x530>
 8001b54:	4b59      	ldr	r3, [pc, #356]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b58:	4b58      	ldr	r3, [pc, #352]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b5a:	495a      	ldr	r1, [pc, #360]	@ (8001cc4 <HAL_RCC_OscConfig+0x688>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b60:	4b56      	ldr	r3, [pc, #344]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b64:	4b55      	ldr	r3, [pc, #340]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b66:	4959      	ldr	r1, [pc, #356]	@ (8001ccc <HAL_RCC_OscConfig+0x690>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7ff fac4 	bl	8001100 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fabf 	bl	8001100 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a51      	ldr	r2, [pc, #324]	@ (8001cd0 <HAL_RCC_OscConfig+0x694>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0ca      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d0ef      	beq.n	8001b7e <HAL_RCC_OscConfig+0x542>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff faae 	bl	8001100 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff faa9 	bl	8001100 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a46      	ldr	r2, [pc, #280]	@ (8001cd0 <HAL_RCC_OscConfig+0x694>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0b4      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bca:	2323      	movs	r3, #35	@ 0x23
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b39      	ldr	r3, [pc, #228]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd8:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001bda:	493e      	ldr	r1, [pc, #248]	@ (8001cd4 <HAL_RCC_OscConfig+0x698>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d100      	bne.n	8001bea <HAL_RCC_OscConfig+0x5ae>
 8001be8:	e09d      	b.n	8001d26 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d100      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5b6>
 8001bf0:	e076      	b.n	8001ce0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d145      	bne.n	8001c86 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c00:	4935      	ldr	r1, [pc, #212]	@ (8001cd8 <HAL_RCC_OscConfig+0x69c>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa7b 	bl	8001100 <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fa76 	bl	8001100 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e082      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	049b      	lsls	r3, r3, #18
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a2a      	ldr	r2, [pc, #168]	@ (8001cdc <HAL_RCC_OscConfig+0x6a0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	431a      	orrs	r2, r3
 8001c48:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c54:	2180      	movs	r1, #128	@ 0x80
 8001c56:	0449      	lsls	r1, r1, #17
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fa50 	bl	8001100 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fa4b 	bl	8001100 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e057      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c78:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x62a>
 8001c84:	e04f      	b.n	8001d26 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001c8c:	4912      	ldr	r1, [pc, #72]	@ (8001cd8 <HAL_RCC_OscConfig+0x69c>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fa35 	bl	8001100 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fa30 	bl	8001100 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e03c      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cae:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_RCC_OscConfig+0x680>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	049b      	lsls	r3, r3, #18
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x660>
 8001cba:	e034      	b.n	8001d26 <HAL_RCC_OscConfig+0x6ea>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	ffff1fff 	.word	0xffff1fff
 8001cc4:	fffffeff 	.word	0xfffffeff
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	fffffbff 	.word	0xfffffbff
 8001cd0:	00001388 	.word	0x00001388
 8001cd4:	efffffff 	.word	0xefffffff
 8001cd8:	feffffff 	.word	0xfeffffff
 8001cdc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e01d      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_RCC_OscConfig+0x6f4>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	025b      	lsls	r3, r3, #9
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10f      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	23f0      	movs	r3, #240	@ 0xf0
 8001d06:	039b      	lsls	r3, r3, #14
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	23c0      	movs	r3, #192	@ 0xc0
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b00a      	add	sp, #40	@ 0x28
 8001d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e128      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b96      	ldr	r3, [pc, #600]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4013      	ands	r3, r2
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d91e      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b93      	ldr	r3, [pc, #588]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	4b90      	ldr	r3, [pc, #576]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d68:	f7ff f9ca 	bl	8001100 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d70:	e009      	b.n	8001d86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d72:	f7ff f9c5 	bl	8001100 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4a8a      	ldr	r2, [pc, #552]	@ (8001fa8 <HAL_RCC_ClockConfig+0x274>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e109      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b87      	ldr	r3, [pc, #540]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9e:	4b83      	ldr	r3, [pc, #524]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	22f0      	movs	r2, #240	@ 0xf0
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	d100      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x8a>
 8001dbc:	e089      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc6:	4b79      	ldr	r3, [pc, #484]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d120      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0e1      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dde:	4b73      	ldr	r3, [pc, #460]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	049b      	lsls	r3, r3, #18
 8001de6:	4013      	ands	r3, r2
 8001de8:	d114      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0d5      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df6:	4b6d      	ldr	r3, [pc, #436]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0ca      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e04:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0c2      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e14:	4b65      	ldr	r3, [pc, #404]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4b62      	ldr	r3, [pc, #392]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f96a 	bl	8001100 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3a:	f7ff f961 	bl	8001100 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a58      	ldr	r2, [pc, #352]	@ (8001fa8 <HAL_RCC_ClockConfig+0x274>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0a5      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4e:	4b57      	ldr	r3, [pc, #348]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	220c      	movs	r2, #12
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d1ef      	bne.n	8001e3a <HAL_RCC_ClockConfig+0x106>
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d111      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	e009      	b.n	8001e7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e66:	f7ff f94b 	bl	8001100 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	4a4d      	ldr	r2, [pc, #308]	@ (8001fa8 <HAL_RCC_ClockConfig+0x274>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e08f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	220c      	movs	r2, #12
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d1ef      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x132>
 8001e86:	e024      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7ff f935 	bl	8001100 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a42      	ldr	r2, [pc, #264]	@ (8001fa8 <HAL_RCC_ClockConfig+0x274>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e079      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea6:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x15e>
 8001eb2:	e00e      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7ff f924 	bl	8001100 <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa8 <HAL_RCC_ClockConfig+0x274>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e068      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ec8:	4b38      	ldr	r3, [pc, #224]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed2:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d21e      	bcs.n	8001f1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee0:	4b30      	ldr	r3, [pc, #192]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4393      	bics	r3, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef2:	f7ff f905 	bl	8001100 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	e009      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f900 	bl	8001100 <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	4a28      	ldr	r2, [pc, #160]	@ (8001fa8 <HAL_RCC_ClockConfig+0x274>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e044      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <HAL_RCC_ClockConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2204      	movs	r2, #4
 8001f24:	4013      	ands	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a20      	ldr	r2, [pc, #128]	@ (8001fb0 <HAL_RCC_ClockConfig+0x27c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	4013      	ands	r3, r2
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <HAL_RCC_ClockConfig+0x280>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	00da      	lsls	r2, r3, #3
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f5c:	f000 f832 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f60:	0001      	movs	r1, r0
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_RCC_ClockConfig+0x278>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	220f      	movs	r2, #15
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <HAL_RCC_ClockConfig+0x284>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	000a      	movs	r2, r1
 8001f72:	40da      	lsrs	r2, r3
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <HAL_RCC_ClockConfig+0x288>)
 8001f76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_RCC_ClockConfig+0x28c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	250b      	movs	r5, #11
 8001f7e:	197c      	adds	r4, r7, r5
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff f877 	bl	8001074 <HAL_InitTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f8a:	197b      	adds	r3, r7, r5
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f92:	197b      	adds	r3, r7, r5
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	00001388 	.word	0x00001388
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffff8ff 	.word	0xfffff8ff
 8001fb4:	ffffc7ff 	.word	0xffffc7ff
 8001fb8:	08003774 	.word	0x08003774
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b08e      	sub	sp, #56	@ 0x38
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fca:	4b4c      	ldr	r3, [pc, #304]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x138>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d014      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001fda:	d900      	bls.n	8001fde <HAL_RCC_GetSysClockFreq+0x1a>
 8001fdc:	e07b      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x112>
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x24>
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe6:	e076      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fe8:	4b44      	ldr	r3, [pc, #272]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x138>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2210      	movs	r2, #16
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ff2:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ff4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ff6:	e07c      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ff8:	4b42      	ldr	r3, [pc, #264]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ffc:	e079      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ffe:	4b42      	ldr	r3, [pc, #264]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x144>)
 8002000:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002002:	e076      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002006:	0c9a      	lsrs	r2, r3, #18
 8002008:	230f      	movs	r3, #15
 800200a:	401a      	ands	r2, r3
 800200c:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <HAL_RCC_GetSysClockFreq+0x148>)
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002014:	0d9a      	lsrs	r2, r3, #22
 8002016:	2303      	movs	r3, #3
 8002018:	4013      	ands	r3, r2
 800201a:	3301      	adds	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201e:	4b37      	ldr	r3, [pc, #220]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	4013      	ands	r3, r2
 8002028:	d01a      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800202a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	4a35      	ldr	r2, [pc, #212]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x144>)
 8002034:	2300      	movs	r3, #0
 8002036:	69b8      	ldr	r0, [r7, #24]
 8002038:	69f9      	ldr	r1, [r7, #28]
 800203a:	f7fe f9fb 	bl	8000434 <__aeabi_lmul>
 800203e:	0002      	movs	r2, r0
 8002040:	000b      	movs	r3, r1
 8002042:	0010      	movs	r0, r2
 8002044:	0019      	movs	r1, r3
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f7fe f9cf 	bl	80003f4 <__aeabi_uldivmod>
 8002056:	0002      	movs	r2, r0
 8002058:	000b      	movs	r3, r1
 800205a:	0013      	movs	r3, r2
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
 800205e:	e037      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002060:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	4013      	ands	r3, r2
 8002068:	d01a      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800206a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4a23      	ldr	r2, [pc, #140]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002074:	2300      	movs	r3, #0
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	f7fe f9db 	bl	8000434 <__aeabi_lmul>
 800207e:	0002      	movs	r2, r0
 8002080:	000b      	movs	r3, r1
 8002082:	0010      	movs	r0, r2
 8002084:	0019      	movs	r1, r3
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f7fe f9af 	bl	80003f4 <__aeabi_uldivmod>
 8002096:	0002      	movs	r2, r0
 8002098:	000b      	movs	r3, r1
 800209a:	0013      	movs	r3, r2
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
 800209e:	e017      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	0018      	movs	r0, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	0019      	movs	r1, r3
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x140>)
 80020aa:	2300      	movs	r3, #0
 80020ac:	f7fe f9c2 	bl	8000434 <__aeabi_lmul>
 80020b0:	0002      	movs	r2, r0
 80020b2:	000b      	movs	r3, r1
 80020b4:	0010      	movs	r0, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	001c      	movs	r4, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	001d      	movs	r5, r3
 80020c0:	0022      	movs	r2, r4
 80020c2:	002b      	movs	r3, r5
 80020c4:	f7fe f996 	bl	80003f4 <__aeabi_uldivmod>
 80020c8:	0002      	movs	r2, r0
 80020ca:	000b      	movs	r3, r1
 80020cc:	0013      	movs	r3, r2
 80020ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80020d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80020d4:	e00d      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x138>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0b5b      	lsrs	r3, r3, #13
 80020dc:	2207      	movs	r2, #7
 80020de:	4013      	ands	r3, r2
 80020e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	3301      	adds	r3, #1
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	0212      	lsls	r2, r2, #8
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80020f0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b00e      	add	sp, #56	@ 0x38
 80020fa:	bdb0      	pop	{r4, r5, r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	003d0900 	.word	0x003d0900
 8002104:	00f42400 	.word	0x00f42400
 8002108:	007a1200 	.word	0x007a1200
 800210c:	08003784 	.word	0x08003784

08002110 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002118:	2017      	movs	r0, #23
 800211a:	183b      	adds	r3, r7, r0
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	4013      	ands	r3, r2
 8002128:	d100      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800212a:	e0c7      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212c:	4b84      	ldr	r3, [pc, #528]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800212e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	4013      	ands	r3, r2
 8002136:	d109      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b81      	ldr	r3, [pc, #516]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800213a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800213c:	4b80      	ldr	r3, [pc, #512]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	0549      	lsls	r1, r1, #21
 8002142:	430a      	orrs	r2, r1
 8002144:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002146:	183b      	adds	r3, r7, r0
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b7d      	ldr	r3, [pc, #500]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d11a      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002158:	4b7a      	ldr	r3, [pc, #488]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b79      	ldr	r3, [pc, #484]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0049      	lsls	r1, r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7fe ffcb 	bl	8001100 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	e008      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7fe ffc6 	bl	8001100 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0d9      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d0f0      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800218e:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	23c0      	movs	r3, #192	@ 0xc0
 8002194:	039b      	lsls	r3, r3, #14
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	23c0      	movs	r3, #192	@ 0xc0
 80021a0:	039b      	lsls	r3, r3, #14
 80021a2:	4013      	ands	r3, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d013      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	23c0      	movs	r3, #192	@ 0xc0
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	401a      	ands	r2, r3
 80021b4:	23c0      	movs	r3, #192	@ 0xc0
 80021b6:	029b      	lsls	r3, r3, #10
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d10a      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021bc:	4b60      	ldr	r3, [pc, #384]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	029b      	lsls	r3, r3, #10
 80021c4:	401a      	ands	r2, r3
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d101      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0b1      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021d6:	23c0      	movs	r3, #192	@ 0xc0
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	4013      	ands	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d03b      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	23c0      	movs	r3, #192	@ 0xc0
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	4013      	ands	r3, r2
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d033      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2220      	movs	r2, #32
 80021fa:	4013      	ands	r3, r2
 80021fc:	d02e      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021fe:	4b50      	ldr	r3, [pc, #320]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002202:	4a51      	ldr	r2, [pc, #324]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002208:	4b4d      	ldr	r3, [pc, #308]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800220a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800220c:	4b4c      	ldr	r3, [pc, #304]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	0309      	lsls	r1, r1, #12
 8002212:	430a      	orrs	r2, r1
 8002214:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800221a:	4b49      	ldr	r3, [pc, #292]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800221c:	494b      	ldr	r1, [pc, #300]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800221e:	400a      	ands	r2, r1
 8002220:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4013      	ands	r3, r2
 8002230:	d014      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe ff65 	bl	8001100 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800223a:	e009      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe ff60 	bl	8001100 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	4a42      	ldr	r2, [pc, #264]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e072      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002250:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002252:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d0ef      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	4013      	ands	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	23c0      	movs	r3, #192	@ 0xc0
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	401a      	ands	r2, r3
 8002270:	23c0      	movs	r3, #192	@ 0xc0
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	429a      	cmp	r2, r3
 8002276:	d10c      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a35      	ldr	r2, [pc, #212]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	23c0      	movs	r3, #192	@ 0xc0
 8002288:	039b      	lsls	r3, r3, #14
 800228a:	401a      	ands	r2, r3
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002294:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	23c0      	movs	r3, #192	@ 0xc0
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	401a      	ands	r2, r3
 80022a0:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022a6:	2317      	movs	r3, #23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b6:	4928      	ldr	r1, [pc, #160]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2202      	movs	r2, #2
 80022c2:	4013      	ands	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	220c      	movs	r2, #12
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2204      	movs	r2, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e4:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2208      	movs	r2, #8
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002302:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	4a16      	ldr	r2, [pc, #88]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002312:	430a      	orrs	r2, r1
 8002314:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002324:	4a0f      	ldr	r2, [pc, #60]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002330:	430a      	orrs	r2, r1
 8002332:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b006      	add	sp, #24
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
 8002348:	fffcffff 	.word	0xfffcffff
 800234c:	fff7ffff 	.word	0xfff7ffff
 8002350:	00001388 	.word	0x00001388
 8002354:	ffcfffff 	.word	0xffcfffff
 8002358:	efffffff 	.word	0xefffffff
 800235c:	fffff3ff 	.word	0xfffff3ff
 8002360:	ffffcfff 	.word	0xffffcfff
 8002364:	fff3ffff 	.word	0xfff3ffff

08002368 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e088      	b.n	8002494 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2221      	movs	r2, #33	@ 0x21
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f7fe fd7f 	bl	8000e9c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2221      	movs	r2, #33	@ 0x21
 80023a2:	2102      	movs	r1, #2
 80023a4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2210      	movs	r2, #16
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d05f      	beq.n	8002474 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ca      	movs	r2, #202	@ 0xca
 80023ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2253      	movs	r2, #83	@ 0x53
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80023c4:	250f      	movs	r5, #15
 80023c6:	197c      	adds	r4, r7, r5
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fb86 	bl	8002adc <RTC_EnterInitMode>
 80023d0:	0003      	movs	r3, r0
 80023d2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80023d4:	0028      	movs	r0, r5
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12c      	bne.n	8002438 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	492c      	ldr	r1, [pc, #176]	@ (800249c <HAL_RTC_Init+0x134>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68d2      	ldr	r2, [r2, #12]
 8002414:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6919      	ldr	r1, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800242a:	183c      	adds	r4, r7, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fb98 	bl	8002b64 <RTC_ExitInitMode>
 8002434:	0003      	movs	r3, r0
 8002436:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002438:	230f      	movs	r3, #15
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2103      	movs	r1, #3
 800244e:	438a      	bics	r2, r1
 8002450:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	22ff      	movs	r2, #255	@ 0xff
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24
 8002472:	e003      	b.n	800247c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800247c:	230f      	movs	r3, #15
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2221      	movs	r2, #33	@ 0x21
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800248e:	230f      	movs	r3, #15
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bdb0      	pop	{r4, r5, r7, pc}
 800249c:	ff8fffbf 	.word	0xff8fffbf

080024a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_RTC_SetTime+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e092      	b.n	80025e4 <HAL_RTC_SetTime+0x144>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2221      	movs	r2, #33	@ 0x21
 80024ca:	2102      	movs	r1, #2
 80024cc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d125      	bne.n	8002520 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	4013      	ands	r3, r2
 80024de:	d102      	bne.n	80024e6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fb64 	bl	8002bb8 <RTC_ByteToBcd2>
 80024f0:	0003      	movs	r3, r0
 80024f2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fb5d 	bl	8002bb8 <RTC_ByteToBcd2>
 80024fe:	0003      	movs	r3, r0
 8002500:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002502:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	789b      	ldrb	r3, [r3, #2]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fb55 	bl	8002bb8 <RTC_ByteToBcd2>
 800250e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002510:	0022      	movs	r2, r4
 8002512:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	78db      	ldrb	r3, [r3, #3]
 8002518:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e017      	b.n	8002550 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2240      	movs	r2, #64	@ 0x40
 8002528:	4013      	ands	r3, r2
 800252a:	d102      	bne.n	8002532 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800253e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002544:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	78db      	ldrb	r3, [r3, #3]
 800254a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	22ca      	movs	r2, #202	@ 0xca
 8002556:	625a      	str	r2, [r3, #36]	@ 0x24
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2253      	movs	r2, #83	@ 0x53
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002560:	2513      	movs	r5, #19
 8002562:	197c      	adds	r4, r7, r5
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	0018      	movs	r0, r3
 8002568:	f000 fab8 	bl	8002adc <RTC_EnterInitMode>
 800256c:	0003      	movs	r3, r0
 800256e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002570:	0028      	movs	r0, r5
 8002572:	183b      	adds	r3, r7, r0
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d120      	bne.n	80025bc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	491a      	ldr	r1, [pc, #104]	@ (80025ec <HAL_RTC_SetTime+0x14c>)
 8002582:	400a      	ands	r2, r1
 8002584:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4917      	ldr	r1, [pc, #92]	@ (80025f0 <HAL_RTC_SetTime+0x150>)
 8002592:	400a      	ands	r2, r1
 8002594:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025ae:	183c      	adds	r4, r7, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fad6 	bl	8002b64 <RTC_ExitInitMode>
 80025b8:	0003      	movs	r3, r0
 80025ba:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80025bc:	2313      	movs	r3, #19
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2221      	movs	r2, #33	@ 0x21
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	22ff      	movs	r2, #255	@ 0xff
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]

  return status;
 80025de:	2313      	movs	r3, #19
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	781b      	ldrb	r3, [r3, #0]
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b006      	add	sp, #24
 80025ea:	bdb0      	pop	{r4, r5, r7, pc}
 80025ec:	007f7f7f 	.word	0x007f7f7f
 80025f0:	fffbffff 	.word	0xfffbffff

080025f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	5c9b      	ldrb	r3, [r3, r2]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_RTC_SetDate+0x1e>
 800260e:	2302      	movs	r3, #2
 8002610:	e07e      	b.n	8002710 <HAL_RTC_SetDate+0x11c>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2221      	movs	r2, #33	@ 0x21
 800261e:	2102      	movs	r1, #2
 8002620:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <HAL_RTC_SetDate+0x52>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	001a      	movs	r2, r3
 800262e:	2310      	movs	r3, #16
 8002630:	4013      	ands	r3, r2
 8002632:	d008      	beq.n	8002646 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	2210      	movs	r2, #16
 800263a:	4393      	bics	r3, r2
 800263c:	b2db      	uxtb	r3, r3
 800263e:	330a      	adds	r3, #10
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11c      	bne.n	8002686 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	78db      	ldrb	r3, [r3, #3]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fab1 	bl	8002bb8 <RTC_ByteToBcd2>
 8002656:	0003      	movs	r3, r0
 8002658:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 faaa 	bl	8002bb8 <RTC_ByteToBcd2>
 8002664:	0003      	movs	r3, r0
 8002666:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002668:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	789b      	ldrb	r3, [r3, #2]
 800266e:	0018      	movs	r0, r3
 8002670:	f000 faa2 	bl	8002bb8 <RTC_ByteToBcd2>
 8002674:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002676:	0022      	movs	r2, r4
 8002678:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	e00e      	b.n	80026a4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	78db      	ldrb	r3, [r3, #3]
 800268a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002692:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002698:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	22ca      	movs	r2, #202	@ 0xca
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2253      	movs	r2, #83	@ 0x53
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026b4:	2513      	movs	r5, #19
 80026b6:	197c      	adds	r4, r7, r5
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fa0e 	bl	8002adc <RTC_EnterInitMode>
 80026c0:	0003      	movs	r3, r0
 80026c2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80026c4:	0028      	movs	r0, r5
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4910      	ldr	r1, [pc, #64]	@ (8002718 <HAL_RTC_SetDate+0x124>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026da:	183c      	adds	r4, r7, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 fa40 	bl	8002b64 <RTC_ExitInitMode>
 80026e4:	0003      	movs	r3, r0
 80026e6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80026e8:	2313      	movs	r3, #19
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2221      	movs	r2, #33	@ 0x21
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	22ff      	movs	r2, #255	@ 0xff
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	2100      	movs	r1, #0
 8002708:	5499      	strb	r1, [r3, r2]

  return status;
 800270a:	2313      	movs	r3, #19
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	781b      	ldrb	r3, [r3, #0]
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b006      	add	sp, #24
 8002716:	bdb0      	pop	{r4, r5, r7, pc}
 8002718:	00ffff3f 	.word	0x00ffff3f

0800271c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b089      	sub	sp, #36	@ 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002728:	4ba7      	ldr	r3, [pc, #668]	@ (80029c8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	22fa      	movs	r2, #250	@ 0xfa
 800272e:	01d1      	lsls	r1, r2, #7
 8002730:	0018      	movs	r0, r3
 8002732:	f7fd fce9 	bl	8000108 <__udivsi3>
 8002736:	0003      	movs	r3, r0
 8002738:	001a      	movs	r2, r3
 800273a:	0013      	movs	r3, r2
 800273c:	015b      	lsls	r3, r3, #5
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	189b      	adds	r3, r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	5c9b      	ldrb	r3, [r3, r2]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_RTC_SetAlarm_IT+0x42>
 800275a:	2302      	movs	r3, #2
 800275c:	e130      	b.n	80029c0 <HAL_RTC_SetAlarm_IT+0x2a4>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2221      	movs	r2, #33	@ 0x21
 800276a:	2102      	movs	r1, #2
 800276c:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d136      	bne.n	80027e2 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2240      	movs	r2, #64	@ 0x40
 800277c:	4013      	ands	r3, r2
 800277e:	d102      	bne.n	8002786 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fa14 	bl	8002bb8 <RTC_ByteToBcd2>
 8002790:	0003      	movs	r3, r0
 8002792:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fa0d 	bl	8002bb8 <RTC_ByteToBcd2>
 800279e:	0003      	movs	r3, r0
 80027a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80027a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fa05 	bl	8002bb8 <RTC_ByteToBcd2>
 80027ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80027b0:	0022      	movs	r2, r4
 80027b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80027ba:	431a      	orrs	r2, r3
 80027bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2220      	movs	r2, #32
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f9f7 	bl	8002bb8 <RTC_ByteToBcd2>
 80027ca:	0003      	movs	r3, r0
 80027cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80027ce:	0022      	movs	r2, r4
 80027d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80027d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80027dc:	4313      	orrs	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	e022      	b.n	8002828 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2240      	movs	r2, #64	@ 0x40
 80027ea:	4013      	ands	r3, r2
 80027ec:	d102      	bne.n	80027f4 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002800:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002806:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	78db      	ldrb	r3, [r3, #3]
 800280c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800280e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2120      	movs	r1, #32
 8002814:	5c5b      	ldrb	r3, [r3, r1]
 8002816:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002818:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800281e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002824:	4313      	orrs	r3, r2
 8002826:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	22ca      	movs	r2, #202	@ 0xca
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2253      	movs	r2, #83	@ 0x53
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	429a      	cmp	r2, r3
 800284e:	d146      	bne.n	80028de <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	495c      	ldr	r1, [pc, #368]	@ (80029cc <HAL_RTC_SetAlarm_IT+0x2b0>)
 800285c:	400a      	ands	r2, r1
 800285e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	22ff      	movs	r2, #255	@ 0xff
 8002868:	401a      	ands	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4958      	ldr	r1, [pc, #352]	@ (80029d0 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3b01      	subs	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10d      	bne.n	800289c <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	22ff      	movs	r2, #255	@ 0xff
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2221      	movs	r2, #33	@ 0x21
 800288c:	2103      	movs	r1, #3
 800288e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e091      	b.n	80029c0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d0e5      	beq.n	8002874 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2180      	movs	r1, #128	@ 0x80
 80028c4:	0049      	lsls	r1, r1, #1
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2180      	movs	r1, #128	@ 0x80
 80028d6:	0149      	lsls	r1, r1, #5
 80028d8:	430a      	orrs	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	e055      	b.n	800298a <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	493a      	ldr	r1, [pc, #232]	@ (80029d4 <HAL_RTC_SetAlarm_IT+0x2b8>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	22ff      	movs	r2, #255	@ 0xff
 80028f6:	401a      	ands	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4936      	ldr	r1, [pc, #216]	@ (80029d8 <HAL_RTC_SetAlarm_IT+0x2bc>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002902:	4b31      	ldr	r3, [pc, #196]	@ (80029c8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	22fa      	movs	r2, #250	@ 0xfa
 8002908:	01d1      	lsls	r1, r2, #7
 800290a:	0018      	movs	r0, r3
 800290c:	f7fd fbfc 	bl	8000108 <__udivsi3>
 8002910:	0003      	movs	r3, r0
 8002912:	001a      	movs	r2, r3
 8002914:	0013      	movs	r3, r2
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	189b      	adds	r3, r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3b01      	subs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	22ff      	movs	r2, #255	@ 0xff
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2221      	movs	r2, #33	@ 0x21
 800293a:	2103      	movs	r1, #3
 800293c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e03a      	b.n	80029c0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	d0e5      	beq.n	8002922 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	0089      	lsls	r1, r1, #2
 8002974:	430a      	orrs	r2, r1
 8002976:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	0189      	lsls	r1, r1, #6
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 8002990:	2180      	movs	r1, #128	@ 0x80
 8002992:	0289      	lsls	r1, r1, #10
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002998:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_RTC_SetAlarm_IT+0x2c0>)
 800299e:	2180      	movs	r1, #128	@ 0x80
 80029a0:	0289      	lsls	r1, r1, #10
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	22ff      	movs	r2, #255	@ 0xff
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2221      	movs	r2, #33	@ 0x21
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b009      	add	sp, #36	@ 0x24
 80029c6:	bd90      	pop	{r4, r7, pc}
 80029c8:	20000004 	.word	0x20000004
 80029cc:	fffffeff 	.word	0xfffffeff
 80029d0:	fffffe7f 	.word	0xfffffe7f
 80029d4:	fffffdff 	.word	0xfffffdff
 80029d8:	fffffd7f 	.word	0xfffffd7f
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <HAL_RTC_AlarmIRQHandler+0x90>)
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0292      	lsls	r2, r2, #10
 80029ee:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	4013      	ands	r3, r2
 80029fc:	d014      	beq.n	8002a28 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	22ff      	movs	r2, #255	@ 0xff
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4916      	ldr	r1, [pc, #88]	@ (8002a74 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f82a 	bl	8002a7c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	019b      	lsls	r3, r3, #6
 8002a32:	4013      	ands	r3, r2
 8002a34:	d014      	beq.n	8002a60 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00d      	beq.n	8002a60 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	22ff      	movs	r2, #255	@ 0xff
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4909      	ldr	r1, [pc, #36]	@ (8002a78 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f9de 	bl	8002e1c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2221      	movs	r2, #33	@ 0x21
 8002a64:	2101      	movs	r1, #1
 8002a66:	5499      	strb	r1, [r3, r2]
}
 8002a68:	46c0      	nop			@ (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40010400 	.word	0x40010400
 8002a74:	fffffe7f 	.word	0xfffffe7f
 8002a78:	fffffd7f 	.word	0xfffffd7f

08002a7c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad8 <HAL_RTC_WaitForSynchro+0x4c>)
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa0:	f7fe fb2e 	bl	8001100 <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aaa:	f7fe fb29 	bl	8001100 <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad2      	subs	r2, r2, r3
 8002ab4:	23fa      	movs	r3, #250	@ 0xfa
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d901      	bls.n	8002ac0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e006      	b.n	8002ace <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d0ee      	beq.n	8002aaa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	0001ff5f 	.word	0x0001ff5f

08002adc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	4013      	ands	r3, r2
 8002afa:	d12c      	bne.n	8002b56 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe faf8 	bl	8001100 <HAL_GetTick>
 8002b10:	0003      	movs	r3, r0
 8002b12:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b14:	e014      	b.n	8002b40 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b16:	f7fe faf3 	bl	8001100 <HAL_GetTick>
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	200f      	movs	r0, #15
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	1839      	adds	r1, r7, r0
 8002b26:	7809      	ldrb	r1, [r1, #0]
 8002b28:	7019      	strb	r1, [r3, #0]
 8002b2a:	23fa      	movs	r3, #250	@ 0xfa
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d906      	bls.n	8002b40 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2221      	movs	r2, #33	@ 0x21
 8002b36:	2104      	movs	r1, #4
 8002b38:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2240      	movs	r2, #64	@ 0x40
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d104      	bne.n	8002b56 <RTC_EnterInitMode+0x7a>
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d1df      	bne.n	8002b16 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002b56:	230f      	movs	r3, #15
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	240f      	movs	r4, #15
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2180      	movs	r1, #128	@ 0x80
 8002b80:	438a      	bics	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d10c      	bne.n	8002baa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f7ff ff7a 	bl	8002a8c <HAL_RTC_WaitForSynchro>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d006      	beq.n	8002baa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2221      	movs	r2, #33	@ 0x21
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002baa:	230f      	movs	r3, #15
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b005      	add	sp, #20
 8002bb6:	bd90      	pop	{r4, r7, pc}

08002bb8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002bc8:	e007      	b.n	8002bda <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	1dfa      	adds	r2, r7, #7
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	3a0a      	subs	r2, #10
 8002bd8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	d8f3      	bhi.n	8002bca <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b2db      	uxtb	r3, r3
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002c08:	4b64      	ldr	r3, [pc, #400]	@ (8002d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	22fa      	movs	r2, #250	@ 0xfa
 8002c0e:	01d1      	lsls	r1, r2, #7
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fd fa79 	bl	8000108 <__udivsi3>
 8002c16:	0003      	movs	r3, r0
 8002c18:	001a      	movs	r2, r3
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	015b      	lsls	r3, r3, #5
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0ad      	b.n	8002d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2221      	movs	r2, #33	@ 0x21
 8002c42:	2102      	movs	r1, #2
 8002c44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	22ca      	movs	r2, #202	@ 0xca
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2253      	movs	r2, #83	@ 0x53
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	d019      	beq.n	8002c98 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	22ff      	movs	r2, #255	@ 0xff
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2221      	movs	r2, #33	@ 0x21
 8002c7c:	2103      	movs	r1, #3
 8002c7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	2100      	movs	r1, #0
 8002c86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e082      	b.n	8002d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	d1e5      	bne.n	8002c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	493f      	ldr	r1, [pc, #252]	@ (8002da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	22ff      	movs	r2, #255	@ 0xff
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	493b      	ldr	r1, [pc, #236]	@ (8002da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002cbc:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	22fa      	movs	r2, #250	@ 0xfa
 8002cc2:	01d1      	lsls	r1, r2, #7
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fd fa1f 	bl	8000108 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	001a      	movs	r2, r3
 8002cce:	0013      	movs	r3, r2
 8002cd0:	015b      	lsls	r3, r3, #5
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	22ff      	movs	r2, #255	@ 0xff
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2221      	movs	r2, #33	@ 0x21
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e046      	b.n	8002d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0e5      	beq.n	8002cdc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2107      	movs	r1, #7
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002d3e:	2180      	movs	r1, #128	@ 0x80
 8002d40:	0349      	lsls	r1, r1, #13
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d46:	4b18      	ldr	r3, [pc, #96]	@ (8002da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002d4c:	2180      	movs	r1, #128	@ 0x80
 8002d4e:	0349      	lsls	r1, r1, #13
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2180      	movs	r1, #128	@ 0x80
 8002d60:	01c9      	lsls	r1, r1, #7
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	00c9      	lsls	r1, r1, #3
 8002d74:	430a      	orrs	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	22ff      	movs	r2, #255	@ 0xff
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2221      	movs	r2, #33	@ 0x21
 8002d84:	2101      	movs	r1, #1
 8002d86:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b006      	add	sp, #24
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	fffffbff 	.word	0xfffffbff
 8002da4:	fffffb7f 	.word	0xfffffb7f
 8002da8:	40010400 	.word	0x40010400

08002dac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002db6:	2280      	movs	r2, #128	@ 0x80
 8002db8:	0352      	lsls	r2, r2, #13
 8002dba:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	01db      	lsls	r3, r3, #7
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d014      	beq.n	8002df4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00d      	beq.n	8002df4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	22ff      	movs	r2, #255	@ 0xff
 8002de0:	401a      	ands	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4908      	ldr	r1, [pc, #32]	@ (8002e08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f80c 	bl	8002e0c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2221      	movs	r2, #33	@ 0x21
 8002df8:	2101      	movs	r1, #1
 8002dfa:	5499      	strb	r1, [r3, r2]
}
 8002dfc:	46c0      	nop			@ (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40010400 	.word	0x40010400
 8002e08:	fffffb7f 	.word	0xfffffb7f

08002e0c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e14:	46c0      	nop			@ (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e032      	b.n	8002ea4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2239      	movs	r2, #57	@ 0x39
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2238      	movs	r2, #56	@ 0x38
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7fe f841 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2239      	movs	r2, #57	@ 0x39
 8002e5e:	2102      	movs	r1, #2
 8002e60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	f000 f9ff 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	223e      	movs	r2, #62	@ 0x3e
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	223a      	movs	r2, #58	@ 0x3a
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	223b      	movs	r2, #59	@ 0x3b
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223c      	movs	r2, #60	@ 0x3c
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223d      	movs	r2, #61	@ 0x3d
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2239      	movs	r2, #57	@ 0x39
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e032      	b.n	8002f24 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2239      	movs	r2, #57	@ 0x39
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2238      	movs	r2, #56	@ 0x38
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f829 	bl	8002f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2239      	movs	r2, #57	@ 0x39
 8002ede:	2102      	movs	r1, #2
 8002ee0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	0019      	movs	r1, r3
 8002eec:	0010      	movs	r0, r2
 8002eee:	f000 f9bf 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223e      	movs	r2, #62	@ 0x3e
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223a      	movs	r2, #58	@ 0x3a
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223b      	movs	r2, #59	@ 0x3b
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223c      	movs	r2, #60	@ 0x3c
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	@ 0x3d
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2239      	movs	r2, #57	@ 0x39
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2238      	movs	r2, #56	@ 0x38
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0ad      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2238      	movs	r2, #56	@ 0x38
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d100      	bne.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f6c:	e076      	b.n	800305c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d900      	bls.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002f74:	e095      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d04e      	beq.n	800301a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d900      	bls.n	8002f84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002f82:	e08e      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d021      	beq.n	8002fd4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002f90:	e087      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f9bc 	bl	8003318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2108      	movs	r1, #8
 8002fac:	430a      	orrs	r2, r1
 8002fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2104      	movs	r1, #4
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	619a      	str	r2, [r3, #24]
      break;
 8002fd2:	e06b      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f9d7 	bl	8003390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0109      	lsls	r1, r1, #4
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4931      	ldr	r1, [pc, #196]	@ (80030c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003000:	400a      	ands	r2, r1
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e048      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f9f6 	bl	8003414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2108      	movs	r1, #8
 8003034:	430a      	orrs	r2, r1
 8003036:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2104      	movs	r1, #4
 8003044:	438a      	bics	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69d9      	ldr	r1, [r3, #28]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	61da      	str	r2, [r3, #28]
      break;
 800305a:	e027      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fa15 	bl	8003494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	0109      	lsls	r1, r1, #4
 8003078:	430a      	orrs	r2, r1
 800307a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	490f      	ldr	r1, [pc, #60]	@ (80030c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003088:	400a      	ands	r2, r1
 800308a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69d9      	ldr	r1, [r3, #28]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	61da      	str	r2, [r3, #28]
      break;
 80030a0:	e004      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80030a2:	2317      	movs	r3, #23
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2238      	movs	r2, #56	@ 0x38
 80030b0:	2100      	movs	r1, #0
 80030b2:	5499      	strb	r1, [r3, r2]

  return status;
 80030b4:	2317      	movs	r3, #23
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b006      	add	sp, #24
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	fffffbff 	.word	0xfffffbff

080030c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	230f      	movs	r3, #15
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2238      	movs	r2, #56	@ 0x38
 80030de:	5c9b      	ldrb	r3, [r3, r2]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_ConfigClockSource+0x20>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0bc      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x19a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2238      	movs	r2, #56	@ 0x38
 80030ec:	2101      	movs	r1, #1
 80030ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2239      	movs	r2, #57	@ 0x39
 80030f4:	2102      	movs	r1, #2
 80030f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2277      	movs	r2, #119	@ 0x77
 8003104:	4393      	bics	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4a58      	ldr	r2, [pc, #352]	@ (800326c <HAL_TIM_ConfigClockSource+0x1a4>)
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	0192      	lsls	r2, r2, #6
 8003120:	4293      	cmp	r3, r2
 8003122:	d040      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xde>
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	0192      	lsls	r2, r2, #6
 8003128:	4293      	cmp	r3, r2
 800312a:	d900      	bls.n	800312e <HAL_TIM_ConfigClockSource+0x66>
 800312c:	e088      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 800312e:	2280      	movs	r2, #128	@ 0x80
 8003130:	0152      	lsls	r2, r2, #5
 8003132:	4293      	cmp	r3, r2
 8003134:	d100      	bne.n	8003138 <HAL_TIM_ConfigClockSource+0x70>
 8003136:	e088      	b.n	800324a <HAL_TIM_ConfigClockSource+0x182>
 8003138:	2280      	movs	r2, #128	@ 0x80
 800313a:	0152      	lsls	r2, r2, #5
 800313c:	4293      	cmp	r3, r2
 800313e:	d900      	bls.n	8003142 <HAL_TIM_ConfigClockSource+0x7a>
 8003140:	e07e      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 8003142:	2b70      	cmp	r3, #112	@ 0x70
 8003144:	d018      	beq.n	8003178 <HAL_TIM_ConfigClockSource+0xb0>
 8003146:	d900      	bls.n	800314a <HAL_TIM_ConfigClockSource+0x82>
 8003148:	e07a      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 800314a:	2b60      	cmp	r3, #96	@ 0x60
 800314c:	d04f      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x126>
 800314e:	d900      	bls.n	8003152 <HAL_TIM_ConfigClockSource+0x8a>
 8003150:	e076      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 8003152:	2b50      	cmp	r3, #80	@ 0x50
 8003154:	d03b      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x106>
 8003156:	d900      	bls.n	800315a <HAL_TIM_ConfigClockSource+0x92>
 8003158:	e072      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d057      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x146>
 800315e:	d900      	bls.n	8003162 <HAL_TIM_ConfigClockSource+0x9a>
 8003160:	e06e      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 8003162:	2b30      	cmp	r3, #48	@ 0x30
 8003164:	d063      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x166>
 8003166:	d86b      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d060      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x166>
 800316c:	d868      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d05d      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x166>
 8003172:	2b10      	cmp	r3, #16
 8003174:	d05b      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x166>
 8003176:	e063      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	f000 fa44 	bl	8003614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2277      	movs	r2, #119	@ 0x77
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
      break;
 80031a4:	e052      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031b6:	f000 fa2d 	bl	8003614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2180      	movs	r1, #128	@ 0x80
 80031c6:	01c9      	lsls	r1, r1, #7
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
      break;
 80031cc:	e03e      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031da:	001a      	movs	r2, r3
 80031dc:	f000 f9a0 	bl	8003520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2150      	movs	r1, #80	@ 0x50
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 f9fa 	bl	80035e0 <TIM_ITRx_SetConfig>
      break;
 80031ec:	e02e      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fa:	001a      	movs	r2, r3
 80031fc:	f000 f9be 	bl	800357c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2160      	movs	r1, #96	@ 0x60
 8003206:	0018      	movs	r0, r3
 8003208:	f000 f9ea 	bl	80035e0 <TIM_ITRx_SetConfig>
      break;
 800320c:	e01e      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	001a      	movs	r2, r3
 800321c:	f000 f980 	bl	8003520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2140      	movs	r1, #64	@ 0x40
 8003226:	0018      	movs	r0, r3
 8003228:	f000 f9da 	bl	80035e0 <TIM_ITRx_SetConfig>
      break;
 800322c:	e00e      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0019      	movs	r1, r3
 8003238:	0010      	movs	r0, r2
 800323a:	f000 f9d1 	bl	80035e0 <TIM_ITRx_SetConfig>
      break;
 800323e:	e005      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003240:	230f      	movs	r3, #15
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
      break;
 8003248:	e000      	b.n	800324c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800324a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2239      	movs	r2, #57	@ 0x39
 8003250:	2101      	movs	r1, #1
 8003252:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2238      	movs	r2, #56	@ 0x38
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]

  return status;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	781b      	ldrb	r3, [r3, #0]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	ffff00ff 	.word	0xffff00ff

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	05db      	lsls	r3, r3, #23
 8003286:	429a      	cmp	r2, r3
 8003288:	d007      	beq.n	800329a <TIM_Base_SetConfig+0x2a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <TIM_Base_SetConfig+0x9c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_Base_SetConfig+0x2a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <TIM_Base_SetConfig+0xa0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2270      	movs	r2, #112	@ 0x70
 800329e:	4393      	bics	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	05db      	lsls	r3, r3, #23
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d007      	beq.n	80032c6 <TIM_Base_SetConfig+0x56>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a14      	ldr	r2, [pc, #80]	@ (800330c <TIM_Base_SetConfig+0x9c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <TIM_Base_SetConfig+0x56>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <TIM_Base_SetConfig+0xa0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d108      	bne.n	80032d8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <TIM_Base_SetConfig+0xa4>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2280      	movs	r2, #128	@ 0x80
 80032dc:	4393      	bics	r3, r2
 80032de:	001a      	movs	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	615a      	str	r2, [r3, #20]
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b004      	add	sp, #16
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40010800 	.word	0x40010800
 8003310:	40011400 	.word	0x40011400
 8003314:	fffffcff 	.word	0xfffffcff

08003318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	2201      	movs	r2, #1
 8003328:	4393      	bics	r3, r2
 800332a:	001a      	movs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2270      	movs	r2, #112	@ 0x70
 8003346:	4393      	bics	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2203      	movs	r2, #3
 800334e:	4393      	bics	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2202      	movs	r2, #2
 8003360:	4393      	bics	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b006      	add	sp, #24
 800338e:	bd80      	pop	{r7, pc}

08003390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	2210      	movs	r2, #16
 80033a0:	4393      	bics	r3, r2
 80033a2:	001a      	movs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <TIM_OC2_SetConfig+0x7c>)
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <TIM_OC2_SetConfig+0x80>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2220      	movs	r2, #32
 80033da:	4393      	bics	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffff8fff 	.word	0xffff8fff
 8003410:	fffffcff 	.word	0xfffffcff

08003414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <TIM_OC3_SetConfig+0x78>)
 8003424:	401a      	ands	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2270      	movs	r2, #112	@ 0x70
 8003440:	4393      	bics	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2203      	movs	r2, #3
 8003448:	4393      	bics	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <TIM_OC3_SetConfig+0x7c>)
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fffffeff 	.word	0xfffffeff
 8003490:	fffffdff 	.word	0xfffffdff

08003494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003510 <TIM_OC4_SetConfig+0x7c>)
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a15      	ldr	r2, [pc, #84]	@ (8003514 <TIM_OC4_SetConfig+0x80>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <TIM_OC4_SetConfig+0x84>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	4a10      	ldr	r2, [pc, #64]	@ (800351c <TIM_OC4_SetConfig+0x88>)
 80034dc:	4013      	ands	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	031b      	lsls	r3, r3, #12
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b006      	add	sp, #24
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	ffffefff 	.word	0xffffefff
 8003514:	ffff8fff 	.word	0xffff8fff
 8003518:	fffffcff 	.word	0xfffffcff
 800351c:	ffffdfff 	.word	0xffffdfff

08003520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	2201      	movs	r2, #1
 8003538:	4393      	bics	r3, r2
 800353a:	001a      	movs	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	22f0      	movs	r2, #240	@ 0xf0
 800354a:	4393      	bics	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	220a      	movs	r2, #10
 800355c:	4393      	bics	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b006      	add	sp, #24
 800357a:	bd80      	pop	{r7, pc}

0800357c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	2210      	movs	r2, #16
 800358e:	4393      	bics	r3, r2
 8003590:	001a      	movs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4a0d      	ldr	r2, [pc, #52]	@ (80035dc <TIM_TI2_ConfigInputStage+0x60>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	22a0      	movs	r2, #160	@ 0xa0
 80035b8:	4393      	bics	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b006      	add	sp, #24
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	ffff0fff 	.word	0xffff0fff

080035e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2270      	movs	r2, #112	@ 0x70
 80035f4:	4393      	bics	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	2207      	movs	r2, #7
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b004      	add	sp, #16
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <TIM_ETR_SetConfig+0x3c>)
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	021a      	lsls	r2, r3, #8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	431a      	orrs	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b006      	add	sp, #24
 800364e:	bd80      	pop	{r7, pc}
 8003650:	ffff00ff 	.word	0xffff00ff

08003654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2238      	movs	r2, #56	@ 0x38
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e042      	b.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2238      	movs	r2, #56	@ 0x38
 8003670:	2101      	movs	r1, #1
 8003672:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2239      	movs	r2, #57	@ 0x39
 8003678:	2102      	movs	r1, #2
 800367a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2270      	movs	r2, #112	@ 0x70
 8003690:	4393      	bics	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	05db      	lsls	r3, r3, #23
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d009      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a11      	ldr	r2, [pc, #68]	@ (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10c      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	4393      	bics	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2239      	movs	r2, #57	@ 0x39
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2238      	movs	r2, #56	@ 0x38
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	40010800 	.word	0x40010800
 8003700:	40011400 	.word	0x40011400

08003704 <memset>:
 8003704:	0003      	movs	r3, r0
 8003706:	1882      	adds	r2, r0, r2
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	7019      	strb	r1, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <__libc_init_array>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	2600      	movs	r6, #0
 8003718:	4c0c      	ldr	r4, [pc, #48]	@ (800374c <__libc_init_array+0x38>)
 800371a:	4d0d      	ldr	r5, [pc, #52]	@ (8003750 <__libc_init_array+0x3c>)
 800371c:	1b64      	subs	r4, r4, r5
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	42a6      	cmp	r6, r4
 8003722:	d109      	bne.n	8003738 <__libc_init_array+0x24>
 8003724:	2600      	movs	r6, #0
 8003726:	f000 f819 	bl	800375c <_init>
 800372a:	4c0a      	ldr	r4, [pc, #40]	@ (8003754 <__libc_init_array+0x40>)
 800372c:	4d0a      	ldr	r5, [pc, #40]	@ (8003758 <__libc_init_array+0x44>)
 800372e:	1b64      	subs	r4, r4, r5
 8003730:	10a4      	asrs	r4, r4, #2
 8003732:	42a6      	cmp	r6, r4
 8003734:	d105      	bne.n	8003742 <__libc_init_array+0x2e>
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	00b3      	lsls	r3, r6, #2
 800373a:	58eb      	ldr	r3, [r5, r3]
 800373c:	4798      	blx	r3
 800373e:	3601      	adds	r6, #1
 8003740:	e7ee      	b.n	8003720 <__libc_init_array+0xc>
 8003742:	00b3      	lsls	r3, r6, #2
 8003744:	58eb      	ldr	r3, [r5, r3]
 8003746:	4798      	blx	r3
 8003748:	3601      	adds	r6, #1
 800374a:	e7f2      	b.n	8003732 <__libc_init_array+0x1e>
 800374c:	08003798 	.word	0x08003798
 8003750:	08003798 	.word	0x08003798
 8003754:	0800379c 	.word	0x0800379c
 8003758:	08003798 	.word	0x08003798

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
